#line 1 "/Users/Flavio/Desktop/Project/Linux/platform-redhat.h" 1
//Generated with:
//echo -|gcc -dM - -E -std=gnu99 







































































































































#line 1 "/Users/Flavio/Desktop/Workspaces/FSE15/SamplingConstraints/bugs/linux/drivers/base/core.c" 1
/*
 * drivers/base/core.c - core driver model code (device registration, etc)
 *
 * Copyright (c) 2002-3 Patrick Mochel
 * Copyright (c) 2002-3 Open Source Development Labs
 * Copyright (c) 2006 Greg Kroah-Hartman <gregkh@suse.de>
 * Copyright (c) 2006 Novell, Inc.
 *
 * This file is released under the GPLv2
 *
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/device.h" 1
/*
 * device.h - generic, centralized driver model
 *
 * Copyright (c) 2001-2003 Patrick Mochel <mochel@osdl.org>
 * Copyright (c) 2004-2009 Greg Kroah-Hartman <gregkh@suse.de>
 * Copyright (c) 2008-2009 Novell Inc.
 *
 * This file is released under the GPLv2
 *
 * See Documentation/driver-model/ for more information.
 */

#if !definedEx(_DEVICE_H_)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/ioport.h" 1
/*
 * ioport.h	Definitions of routines for detecting, reserving and
 *		allocating system resources.
 *
 * Authors:	Linus Torvalds
 */

#if !definedEx(_LINUX_IOPORT_H)


#if !definedEx(__ASSEMBLY__)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1
#if !definedEx(__LINUX_COMPILER_H)



#if definedEx(__CHECKER__)












extern void __chk_user_ptr(const volatile void __attribute__((noderef, address_space(1))) *);
extern void __chk_io_ptr(const volatile void __attribute__((noderef, address_space(2))) *);
#endif
#if !definedEx(__CHECKER__)















#endif
#if definedEx(__KERNEL__)

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 1



/*
 * Common definitions for all gcc versions go here.
 */


/* Optimization barrier */
/* The "volatile" is due to gcc bugs */


/*
 * This macro obfuscates arithmetic on a variable address so that gcc
 * shouldn't recognize the original var, and make assumptions about it.
 *
 * This is needed because the C standard makes it undefined to do
 * pointer arithmetic on "objects" outside their boundaries and the
 * gcc optimizers assume this is the case. In particular they
 * assume such arithmetic does not wrap.
 *
 * A miscompilation has been observed because of this on PPC.
 * To work around it we hide the relationship of the pointer and the object
 * using this macro.
 *
 * Versions of the ppc64 compiler before 4.1 had a bug where use of
 * RELOC_HIDE could trash r30. The bug can be worked around by changing
 * the inline assembly constraint from =g to =r, in this particular
 * case either is valid.
 */





/* &a[0] degrades to a pointer: a different type from an array */



/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old:
 */
#if (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))



#endif




/*
 * it doesn't make sense on ARM (currently the only user of __naked) to trace
 * naked functions because then mcount is called without stack and frame pointer
 * being set up and there is no chance to restore the lr register to the value
 * before mcount was called.
 */




/*
 * From the GCC manual:
 *
 * Many functions have no effects except the return value and their
 * return value depends only on the parameters and/or global
 * variables.  Such a function can be subject to common subexpression
 * elimination and loop optimization just as an arithmetic operator
 * would be.
 * [...]
 */











#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc4.h" 1



/* GCC 4.1.[01] miscompiles __weak */










/*
 * A trick to suppress uninitialized variable warning without generating any
 * code
 */



/* Mark functions as cold. gcc will assume any path leading to a call
   to them will be unlikely.  This means a lot of manual unlikely()s
   are unnecessary now for any paths leading to the usual suspects
   like BUG(), printk(), panic() etc. [but let's keep them for now for
   older compilers]

   Early snapshots of gcc 4.3 don't support this and we can't detect this
   in the preprocessor, but we can live with this because they're unreleased.
   Maketime probing would be overkill here.

   gcc also has a __attribute__((__hot__)) to move hot functions into
   a special section, but I don't see any sense in this right now in
   the kernel context */























#line 89 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 2
#line 44 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2



/* Intel compiler defines __GNUC__. So we will overwrite implementations
 * coming from above header files here
 */
#if definedEx(__INTEL_COMPILER)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 1



#if definedEx(__ECC)
/* Some compiler specific definitions are overwritten here
 * for Intel ECC compiler
 */

