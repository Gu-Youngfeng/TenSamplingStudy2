#line 1 "/Users/Flavio/Desktop/Project/Linux/platform-redhat.h" 1
//Generated with:
//echo -|gcc -dM - -E -std=gnu99 







































































































































#line 1 "/Users/Flavio/Desktop/Workspaces/FSE15/SamplingConstraints/bugs/linux/drivers/base/dd.c" 1
/*
 * drivers/base/dd.c - The core device/driver interactions.
 *
 * This file contains the (sometimes tricky) code that controls the
 * interactions between devices and drivers, which primarily includes
 * driver binding and unbinding.
 *
 * All of this code used to exist in drivers/base/bus.c, but was
 * relocated to here in the name of compartmentalization (since it wasn't
 * strictly code just for the 'struct bus_type'.
 *
 * Copyright (c) 2002-5 Patrick Mochel
 * Copyright (c) 2002-3 Open Source Development Labs
 * Copyright (c) 2007-2009 Greg Kroah-Hartman <gregkh@suse.de>
 * Copyright (c) 2007-2009 Novell Inc.
 *
 * This file is released under the GPLv2
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/device.h" 1
/*
 * device.h - generic, centralized driver model
 *
 * Copyright (c) 2001-2003 Patrick Mochel <mochel@osdl.org>
 * Copyright (c) 2004-2009 Greg Kroah-Hartman <gregkh@suse.de>
 * Copyright (c) 2008-2009 Novell Inc.
 *
 * This file is released under the GPLv2
 *
 * See Documentation/driver-model/ for more information.
 */

#if !definedEx(_DEVICE_H_)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/ioport.h" 1
/*
 * ioport.h	Definitions of routines for detecting, reserving and
 *		allocating system resources.
 *
 * Authors:	Linus Torvalds
 */

#if !definedEx(_LINUX_IOPORT_H)


#if !definedEx(__ASSEMBLY__)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1
#if !definedEx(__LINUX_COMPILER_H)



#if definedEx(__CHECKER__)












extern void __chk_user_ptr(const volatile void __attribute__((noderef, address_space(1))) *);
extern void __chk_io_ptr(const volatile void __attribute__((noderef, address_space(2))) *);
#endif
#if !definedEx(__CHECKER__)















#endif
#if definedEx(__KERNEL__)

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 1



/*
 * Common definitions for all gcc versions go here.
 */


/* Optimization barrier */
/* The "volatile" is due to gcc bugs */


/*
 * This macro obfuscates arithmetic on a variable address so that gcc
 * shouldn't recognize the original var, and make assumptions about it.
 *
 * This is needed because the C standard makes it undefined to do
 * pointer arithmetic on "objects" outside their boundaries and the
 * gcc optimizers assume this is the case. In particular they
 * assume such arithmetic does not wrap.
 *
 * A miscompilation has been observed because of this on PPC.
 * To work around it we hide the relationship of the pointer and the object
 * using this macro.
 *
 * Versions of the ppc64 compiler before 4.1 had a bug where use of
 * RELOC_HIDE could trash r30. The bug can be worked around by changing
 * the inline assembly constraint from =g to =r, in this particular
 * case either is valid.
 */





/* &a[0] degrades to a pointer: a different type from an array */



/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old:
 */
#if (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))



#endif




/*
 * it doesn't make sense on ARM (currently the only user of __naked) to trace
 * naked functions because then mcount is called without stack and frame pointer
 * being set up and there is no chance to restore the lr register to the value
 * before mcount was called.
 */




/*
 * From the GCC manual:
 *
 * Many functions have no effects except the return value and their
 * return value depends only on the parameters and/or global
 * variables.  Such a function can be subject to common subexpression
 * elimination and loop optimization just as an arithmetic operator
 * would be.
 * [...]
 */











#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc4.h" 1



/* GCC 4.1.[01] miscompiles __weak */










/*
 * A trick to suppress uninitialized variable warning without generating any
 * code
 */



/* Mark functions as cold. gcc will assume any path leading to a call
   to them will be unlikely.  This means a lot of manual unlikely()s
   are unnecessary now for any paths leading to the usual suspects
   like BUG(), printk(), panic() etc. [but let's keep them for now for
   older compilers]

   Early snapshots of gcc 4.3 don't support this and we can't detect this
   in the preprocessor, but we can live with this because they're unreleased.
   Maketime probing would be overkill here.

   gcc also has a __attribute__((__hot__)) to move hot functions into
   a special section, but I don't see any sense in this right now in
   the kernel context */























#line 89 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 2
#line 44 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2



/* Intel compiler defines __GNUC__. So we will overwrite implementations
 * coming from above header files here
 */
#if definedEx(__INTEL_COMPILER)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 1



#if definedEx(__ECC)
/* Some compiler specific definitions are overwritten here
 * for Intel ECC compiler
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/intrinsics.h" 1
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 2

/* Intel ECC compiler doesn't support gcc specific asm stmts.
 * It uses intrinsics to do the equivalent things.
 */










/* Intel ECC compiler doesn't support __builtin_types_compatible_p() */


#endif

#line 53 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2
#endif
/*
 * Generic compiler-dependent macros required for kernel
 * build go below this comment. Actual compiler/compiler version
 * specific implementations come from the above header files
 */

struct ftrace_branch_data {
	const char *func;
	const char *file;
	unsigned line;
	union {
		struct {
			unsigned long correct;
			unsigned long incorrect;
		};
		struct {
			unsigned long miss;
			unsigned long hit;
		};
		unsigned long miss_hit[2];
	};
};

/*
 * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code
 * to disable branch tracing on a per file basis.
 */























































 


/* Optimization barrier */



/* Unreachable code */
#if !definedEx(unreachable)

#endif






#endif

#if definedEx(__KERNEL__)
/*
 * Allow us to mark functions as 'deprecated' and have gcc emit a nice
 * warning for each use, in hopes of speeding the functions removal.
 * Usage is:
 * 		int __deprecated foo(void)
 */



#if definedEx(MODULE)

#endif
#if !definedEx(MODULE)

#endif



#if !definedEx(CONFIG_ENABLE_MUST_CHECK)


#endif
#if !definedEx(CONFIG_ENABLE_WARN_DEPRECATED)




#endif
/*
 * Allow us to avoid 'defined but not used' warnings on functions and data,
 * as well as force them to be emitted to the assembly file.
 *
 * As of gcc 3.4, static functions that are not marked with attribute((used))
 * may be elided from the assembly file.  As of gcc 3.4, static data not so
 * marked will not be elided, but this may change in a future gcc version.
 *
 * NOTE: Because distributions shipped with a backported unit-at-a-time
 * compiler in gcc 3.3, we must define __used to be __attribute__((used))
 * for gcc >=3.3 instead of 3.4.
 *
 * In prior versions of gcc, such functions and data would be emitted, but
 * would be warned about except with attribute((unused)).
 *
 * Mark functions that are referenced only in inline assembly as __used so
 * the code is emitted even though it appears to be unreferenced.
 */












/*
 * Rather then using noinline to prevent stack consumption, use
 * noinline_for_stack instead.  For documentaiton reasons.
 */





#endif
/*
 * From the GCC manual:
 *
 * Many functions do not examine any values except their arguments,
 * and have no effects except the return value.  Basically this is
 * just slightly more strict class than the `pure' attribute above,
 * since function is not allowed to read global memory.
 *
 * Note that a function that has pointer arguments and examines the
 * data pointed to must _not_ be declared `const'.  Likewise, a
 * function that calls a non-`const' function usually must not be
 * `const'.  It does not make sense for a `const' function to return
 * `void'.
 */
#if (!definedEx(__attribute_const__) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif
/*
 * Tell gcc if a function is cold. The compiler will assume any path
 * directly leading to the call is unlikely.
 */

#if (!definedEx(__cold) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif
/* Simple shorthand for a section definition */
#if !definedEx(__section)

#endif
/* Are two types/vars the same type (ignoring qualifiers)? */
#if !definedEx(__same_type)

#endif
/* Compile time object size, -1 for unknown */
#if (!definedEx(__compiletime_object_size) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif
#if (!definedEx(__compiletime_warning) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif
#if (!definedEx(__compiletime_error) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif
/*
 * Prevent the compiler from merging or refetching accesses.  The compiler
 * is also forbidden from reordering successive instances of ACCESS_ONCE(),
 * but only when the compiler is aware of some particular ordering.  One way
 * to make the compiler aware of ordering is to put the two invocations of
 * ACCESS_ONCE() in different C statements.
 *
 * This macro does absolutely -nothing- to prevent the CPU from reordering,
 * merging, or refetching absolutely anything at any time.  Its main intended
 * use is to mediate communication between process-level code and irq/NMI
 * handlers, all running on the same CPU.
 */


#endif
#line 14 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/ioport.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 1
#if !definedEx(_LINUX_TYPES_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/types.h" 1
#if !definedEx(_ASM_X86_TYPES_H)




#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/types.h" 1
#if !definedEx(_ASM_GENERIC_TYPES_H)

/*
 * int-ll64 is used practically everywhere now,
 * so use it as a reasonable default.
 */
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/int-ll64.h" 1
/*
 * asm-generic/int-ll64.h
 *
 * Integer declarations for architectures which use "long long"
 * for 64-bit types.
 */

#if !definedEx(_ASM_GENERIC_INT_LL64_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitsperlong.h" 1
#if !definedEx(__ASM_X86_BITSPERLONG_H)




 

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/bitsperlong.h" 1
#if !definedEx(__ASM_GENERIC_BITS_PER_LONG)


/*
 * There seems to be no way of detecting this automatically from user
 * space, so 64 bit architectures should override this in their
 * bitsperlong.h. In particular, an architecture that supports
 * both 32 and 64 bit user space must not rely on CONFIG_64BIT
 * to decide it, but rather check a compiler provided macro.
 */



#if definedEx(__KERNEL__)
#if definedEx(CONFIG_64BIT)

#endif
#if !definedEx(CONFIG_64BIT)

#endif
/*
 * FIXME: The check currently breaks x86-64 build, so it's
 * temporarily disabled. Please fix x86-64 and reenable
 */



#endif
#endif
#line 12 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitsperlong.h" 2

#endif
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/int-ll64.h" 2


/*
 * __xx is ok: it doesn't pollute the POSIX namespace. Use these in the
 * header files exported to user space
 */

typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
 



#if definedEx(__KERNEL__)

typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;










 









#endif
#endif
#line 9 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/types.h" 2


typedef unsigned short umode_t;


/*
 * These aren't exported outside the kernel to avoid name space clashes
 */
#if definedEx(__KERNEL__)

/*
 * DMA addresses may be very different from physical addresses
 * and pointers. i386 and powerpc may have 64 bit DMA on 32 bit
 * systems, while sparc64 uses 32 bit DMA addresses for 64 bit
 * physical addresses.
 * This default defines dma_addr_t to have the same size as
 * phys_addr_t, which is the most common way.
 * Do not define the dma64_addr_t type, which never really
 * worked.
 */



 



#endif
#endif
#line 8 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/types.h" 2


#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 2


#if definedEx(__KERNEL__)



#endif
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/posix_types.h" 1
#if !definedEx(_LINUX_POSIX_TYPES_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/stddef.h" 1
#if !definedEx(_LINUX_STDDEF_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1



















 


































	
	
	
	
		
			
			
		
		
			
			
		
		
	





























































 






























 
















































































































#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/stddef.h" 2


#if definedEx(__cplusplus)

#endif
#if !definedEx(__cplusplus)

#endif
#if definedEx(__KERNEL__)
enum {
	false	= 0,
	true	= 1
};


#if (definedEx(__compiler_offsetof) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)))

#endif
#if (!definedEx(__compiler_offsetof) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif
#endif
#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/posix_types.h" 2

/*
 * This allows for 1024 file descriptors: if NR_OPEN is ever grown
 * beyond that you'll have to change this too. But 1024 fd's seem to be
 * enough even for such "real" unices like OSF/1, so hopefully this is
 * one limit that doesn't have to be changed [again].
 *
 * Note that POSIX wants the FD_CLEAR(fd,fdsetp) defines to be in
 * <sys/time.h> (and thus <linux/time.h>) - but this is a more logical
 * place for them. Solved by having dummy defines in <sys/time.h>.
 */

/*
 * Those macros may have been defined in <gnu/types.h>. But we always
 * use the ones here. 
 */















typedef struct {
	unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];
} __kernel_fd_set;

/* Type of a signal handler.  */
typedef void (*__kernel_sighandler_t)(int);

/* Type of a SYSV IPC key.  */
typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types.h" 1
#if definedEx(__i386__)
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types_32.h" 1
#if !definedEx(_ASM_X86_POSIX_TYPES_32_H)


/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.  Also, we cannot
 * assume GCC is being used.
 */

typedef unsigned long	__kernel_ino_t;
typedef unsigned short	__kernel_mode_t;
typedef unsigned short	__kernel_nlink_t;
typedef long		__kernel_off_t;
typedef int		__kernel_pid_t;
typedef unsigned short	__kernel_ipc_pid_t;
typedef unsigned short	__kernel_uid_t;
typedef unsigned short	__kernel_gid_t;
typedef unsigned int	__kernel_size_t;
typedef int		__kernel_ssize_t;
typedef int		__kernel_ptrdiff_t;
typedef long		__kernel_time_t;
typedef long		__kernel_suseconds_t;
typedef long		__kernel_clock_t;
typedef int		__kernel_timer_t;
typedef int		__kernel_clockid_t;
typedef int		__kernel_daddr_t;
typedef char *		__kernel_caddr_t;
typedef unsigned short	__kernel_uid16_t;
typedef unsigned short	__kernel_gid16_t;
typedef unsigned int	__kernel_uid32_t;
typedef unsigned int	__kernel_gid32_t;

typedef unsigned short	__kernel_old_uid_t;
typedef unsigned short	__kernel_old_gid_t;
typedef unsigned short	__kernel_old_dev_t;


typedef long long	__kernel_loff_t;

typedef struct {
	int	val[2];
} __kernel_fsid_t;


#endif
#line 4 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types.h" 2
#endif
#if !definedEx(__i386__)
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types_64.h" 1
#if !definedEx(_ASM_X86_POSIX_TYPES_64_H)


/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.  Also, we cannot
 * assume GCC is being used.
 */

typedef unsigned long	__kernel_ino_t;
typedef unsigned int	__kernel_mode_t;
typedef unsigned long	__kernel_nlink_t;
typedef long		__kernel_off_t;
typedef int		__kernel_pid_t;
typedef int		__kernel_ipc_pid_t;
typedef unsigned int	__kernel_uid_t;
typedef unsigned int	__kernel_gid_t;
typedef unsigned long	__kernel_size_t;
typedef long		__kernel_ssize_t;
typedef long		__kernel_ptrdiff_t;
typedef long		__kernel_time_t;
typedef long		__kernel_suseconds_t;
typedef long		__kernel_clock_t;
typedef int		__kernel_timer_t;
typedef int		__kernel_clockid_t;
typedef int		__kernel_daddr_t;
typedef char *		__kernel_caddr_t;
typedef unsigned short	__kernel_uid16_t;
typedef unsigned short	__kernel_gid16_t;


typedef long long	__kernel_loff_t;

typedef struct {
	int	val[2];
} __kernel_fsid_t;

typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;

typedef unsigned long	__kernel_old_dev_t;


#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types.h" 2
#endif
#line 49 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/posix_types.h" 2

#endif
#line 16 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 2

#if definedEx(__KERNEL__)
typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set		fd_set;
typedef __kernel_dev_t		dev_t;
typedef __kernel_ino_t		ino_t;
typedef __kernel_mode_t		mode_t;
typedef __kernel_nlink_t	nlink_t;
typedef __kernel_off_t		off_t;
typedef __kernel_pid_t		pid_t;
typedef __kernel_daddr_t	daddr_t;
typedef __kernel_key_t		key_t;
typedef __kernel_suseconds_t	suseconds_t;
typedef __kernel_timer_t	timer_t;
typedef __kernel_clockid_t	clockid_t;
typedef __kernel_mqd_t		mqd_t;

typedef _Bool			bool;

typedef __kernel_uid32_t	uid_t;
typedef __kernel_gid32_t	gid_t;
typedef __kernel_uid16_t        uid16_t;
typedef __kernel_gid16_t        gid16_t;

typedef unsigned long		uintptr_t;

#if definedEx(CONFIG_UID16)
/* This is defined by include/asm-{arch}/posix_types.h */
typedef __kernel_old_uid_t	old_uid_t;
typedef __kernel_old_gid_t	old_gid_t;
#endif

typedef __kernel_loff_t		loff_t;

/*
 * The following typedefs are also protected by individual ifdefs for
 * historical reasons:
 */
#if !definedEx(_SIZE_T)

typedef __kernel_size_t		size_t;
#endif
#if !definedEx(_SSIZE_T)

typedef __kernel_ssize_t	ssize_t;
#endif
#if !definedEx(_PTRDIFF_T)

typedef __kernel_ptrdiff_t	ptrdiff_t;
#endif
#if !definedEx(_TIME_T)

typedef __kernel_time_t		time_t;
#endif
#if !definedEx(_CLOCK_T)

typedef __kernel_clock_t	clock_t;
#endif
#if !definedEx(_CADDR_T)

typedef __kernel_caddr_t	caddr_t;
#endif
/* bsd */
typedef unsigned char		u_char;
typedef unsigned short		u_short;
typedef unsigned int		u_int;
typedef unsigned long		u_long;

/* sysv */
typedef unsigned char		unchar;
typedef unsigned short		ushort;
typedef unsigned int		uint;
typedef unsigned long		ulong;

#if !definedEx(__BIT_TYPES_DEFINED__)


typedef		__u8		u_int8_t;
typedef		__s8		int8_t;
typedef		__u16		u_int16_t;
typedef		__s16		int16_t;
typedef		__u32		u_int32_t;
typedef		__s32		int32_t;

#endif
typedef		__u8		uint8_t;
typedef		__u16		uint16_t;
typedef		__u32		uint32_t;


typedef		__u64		uint64_t;
typedef		__u64		u_int64_t;
typedef		__s64		int64_t;

/* this is a special 64bit data type that is 8-byte aligned */




/**
 * The type used for indexing onto a disc or disc partition.
 *
 * Linux always considers sectors to be 512 bytes long independently
 * of the devices real block size.
 *
 * blkcnt_t is the type of the inode's block count.
 */
#if definedEx(CONFIG_LBDAF)
typedef u64 sector_t;
typedef u64 blkcnt_t;
#endif
#if !definedEx(CONFIG_LBDAF)
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
#endif
/*
 * The type of an index into the pagecache.  Use a #define so asm/types.h
 * can override it.
 */
#if !definedEx(pgoff_t)

#endif
#endif
/*
 * Below are truly Linux-specific types that should never collide with
 * any application/library that wants linux/types.h.
 */

#if definedEx(__CHECKER__)

#endif
#if !definedEx(__CHECKER__)

#endif
#if definedEx(__CHECK_ENDIAN__)

#endif
#if !definedEx(__CHECK_ENDIAN__)

#endif
typedef __u16 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __le16;
typedef __u16 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __be16;
typedef __u32 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __le32;
typedef __u32 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __be32;
typedef __u64 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __le64;
typedef __u64 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __be64;

typedef __u16 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __sum16;
typedef __u32 
#if (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))

#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif

#endif
#if ((definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))

#endif
 __wsum;

#if definedEx(__KERNEL__)
typedef unsigned 
#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif
 gfp_t;
typedef unsigned 
#if (definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))
__attribute__((bitwise))
#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))

#endif
 fmode_t;

#if definedEx(CONFIG_PHYS_ADDR_T_64BIT)
typedef u64 phys_addr_t;
#endif
#if !definedEx(CONFIG_PHYS_ADDR_T_64BIT)
typedef u32 phys_addr_t;
#endif
typedef phys_addr_t resource_size_t;

typedef struct {
	volatile int counter;
} atomic_t;

#if definedEx(CONFIG_64BIT)
typedef struct {
	volatile long counter;
} atomic64_t;
#endif
struct ustat {
	__kernel_daddr_t	f_tfree;
	__kernel_ino_t		f_tinode;
	char			f_fname[6];
	char			f_fpack[6];
};

#endif

#endif
#line 15 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/ioport.h" 2
/*
 * Resources are tree-like, allowing
 * nesting etc..
 */
struct resource {
	resource_size_t start;
	resource_size_t end;
	const char *name;
	unsigned long flags;
	struct resource *parent, *sibling, *child;
};

struct resource_list {
	struct resource_list *next;
	struct resource *res;
	struct pci_dev *dev;
};

/*
 * IO resources have these defined flags.
 */

























/* PnP IRQ specific bits (IORESOURCE_BITS) */







/* PnP DMA specific bits (IORESOURCE_BITS) */















/* PnP memory I/O specific bits (IORESOURCE_BITS) */











/* PnP I/O specific bits (IORESOURCE_BITS) */



/* PCI ROM control bits (IORESOURCE_BITS) */





/* PCI control bits.  Shares IORESOURCE_BITS with above PCI ROM.  */


/* PC/ISA/whatever - the normal PC address spaces: IO and memory */
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
			     resource_size_t start, resource_size_t end,
			     const char *name);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int allocate_resource(struct resource *root, struct resource *new,
			     resource_size_t size, resource_size_t min,
			     resource_size_t max, resource_size_t align,
			     void (*alignf)(void *, struct resource *,
					    resource_size_t, resource_size_t),
			     void *alignf_data);
int adjust_resource(struct resource *res, resource_size_t start,
		    resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static 
#if (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)))
inline __attribute__((always_inline))
#endif
#if (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_))
inline
#endif
 resource_size_t resource_size(const struct resource *res)
{
	return res->end - res->start + 1;
}
static 
#if (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)))
inline __attribute__((always_inline))
#endif
#if (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_))
inline
#endif
 unsigned long resource_type(const struct resource *res)
{
	return res->flags & 0x00000f00;
}

/* Convenience shorthand with allocation */







extern struct resource * __request_region(struct resource *,
					resource_size_t start,
					resource_size_t n,
					const char *name, int flags);

/* Compatibility cruft */




extern int __check_region(struct resource *, resource_size_t, resource_size_t);
extern void __release_region(struct resource *, resource_size_t,
				resource_size_t);

static 
#if (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)))
inline __attribute__((always_inline))
#endif
#if (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_))
inline
#endif
 int 
#if (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(CONFIG_ENABLE_WARN_DEPRECATED) || definedEx(_DEVICE_H_)))
__attribute__((deprecated))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(CONFIG_ENABLE_WARN_DEPRECATED) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H))) && definedEx(__KERNEL__) && !definedEx(CONFIG_ENABLE_WARN_DEPRECATED) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(CONFIG_ENABLE_WARN_DEPRECATED) || definedEx(_DEVICE_H_)))
__deprecated
#endif
 check_region(resource_size_t s,
						resource_size_t n)
{
	return __check_region(&ioport_resource, s, n);
}

/* Wrappers for managed devices */
struct device;





extern struct resource * __devm_request_region(struct device *dev,
				struct resource *parent, resource_size_t start,
				resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
				  resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern int iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
		void *arg, int (*func)(unsigned long, unsigned long, void *));

#endif
#endif
#line 18 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/device.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/kobject.h" 1
/*
 * kobject.h - generic kernel object infrastructure.
 *
 * Copyright (c) 2002-2003 Patrick Mochel
 * Copyright (c) 2002-2003 Open Source Development Labs
 * Copyright (c) 2006-2008 Greg Kroah-Hartman <greg@kroah.com>
 * Copyright (c) 2006-2008 Novell Inc.
 *
 * This file is released under the GPLv2.
 *
 * Please read Documentation/kobject.txt before using the kobject
 * interface, ESPECIALLY the parts about reference counts and object
 * destructors.
 */

#if !definedEx(_KOBJECT_H_)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 1
#if (!definedEx(_LINUX_TYPES_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)))


#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/types.h" 1
#if (!definedEx(_ASM_X86_TYPES_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)))




#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/types.h" 1
#if (!definedEx(_ASM_GENERIC_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))

/*
 * int-ll64 is used practically everywhere now,
 * so use it as a reasonable default.
 */
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/int-ll64.h" 1
/*
 * asm-generic/int-ll64.h
 *
 * Integer declarations for architectures which use "long long"
 * for 64-bit types.
 */

#if (!definedEx(_ASM_GENERIC_INT_LL64_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))


#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitsperlong.h" 1
#if (!definedEx(__ASM_X86_BITSPERLONG_H) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))




 

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/bitsperlong.h" 1
#if (!definedEx(__ASM_GENERIC_BITS_PER_LONG) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))


/*
 * There seems to be no way of detecting this automatically from user
 * space, so 64 bit architectures should override this in their
 * bitsperlong.h. In particular, an architecture that supports
 * both 32 and 64 bit user space must not rely on CONFIG_64BIT
 * to decide it, but rather check a compiler provided macro.
 */



#if definedEx(__KERNEL__)
#if definedEx(CONFIG_64BIT)

#endif
#if !definedEx(CONFIG_64BIT)

#endif
/*
 * FIXME: The check currently breaks x86-64 build, so it's
 * temporarily disabled. Please fix x86-64 and reenable
 */



#endif
#endif
#line 12 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitsperlong.h" 2

#endif
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/int-ll64.h" 2

#if !definedEx(__ASSEMBLY__)
/*
 * __xx is ok: it doesn't pollute the POSIX namespace. Use these in the
 * header files exported to user space
 */

typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
 


#endif
#if definedEx(__KERNEL__)
#if !definedEx(__ASSEMBLY__)
typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;










#endif
#if definedEx(__ASSEMBLY__)









#endif
#endif
#endif
#line 9 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/types.h" 2

#if !definedEx(__ASSEMBLY__)
typedef unsigned short umode_t;

#endif
/*
 * These aren't exported outside the kernel to avoid name space clashes
 */
#if definedEx(__KERNEL__)
#if !definedEx(__ASSEMBLY__)
/*
 * DMA addresses may be very different from physical addresses
 * and pointers. i386 and powerpc may have 64 bit DMA on 32 bit
 * systems, while sparc64 uses 32 bit DMA addresses for 64 bit
 * physical addresses.
 * This default defines dma_addr_t to have the same size as
 * phys_addr_t, which is the most common way.
 * Do not define the dma64_addr_t type, which never really
 * worked.
 */



 


#endif
#endif
#endif
#line 8 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/types.h" 2


#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 2

#if !definedEx(__ASSEMBLY__)
#if definedEx(__KERNEL__)



#endif
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/posix_types.h" 1
#if (!definedEx(_LINUX_POSIX_TYPES_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)))


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/stddef.h" 1
#if (!definedEx(_LINUX_STDDEF_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1
#if (!definedEx(__LINUX_COMPILER_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)))



#if definedEx(__CHECKER__)












extern void __chk_user_ptr(const volatile void __attribute__((noderef, address_space(1))) *);
extern void __chk_io_ptr(const volatile void __attribute__((noderef, address_space(2))) *);
#endif
#if !definedEx(__CHECKER__)















#endif
#if definedEx(__KERNEL__)

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 1



/*
 * Common definitions for all gcc versions go here.
 */


/* Optimization barrier */
/* The "volatile" is due to gcc bugs */


/*
 * This macro obfuscates arithmetic on a variable address so that gcc
 * shouldn't recognize the original var, and make assumptions about it.
 *
 * This is needed because the C standard makes it undefined to do
 * pointer arithmetic on "objects" outside their boundaries and the
 * gcc optimizers assume this is the case. In particular they
 * assume such arithmetic does not wrap.
 *
 * A miscompilation has been observed because of this on PPC.
 * To work around it we hide the relationship of the pointer and the object
 * using this macro.
 *
 * Versions of the ppc64 compiler before 4.1 had a bug where use of
 * RELOC_HIDE could trash r30. The bug can be worked around by changing
 * the inline assembly constraint from =g to =r, in this particular
 * case either is valid.
 */





/* &a[0] degrades to a pointer: a different type from an array */



/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old:
 */
#if (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))



#endif




/*
 * it doesn't make sense on ARM (currently the only user of __naked) to trace
 * naked functions because then mcount is called without stack and frame pointer
 * being set up and there is no chance to restore the lr register to the value
 * before mcount was called.
 */




/*
 * From the GCC manual:
 *
 * Many functions have no effects except the return value and their
 * return value depends only on the parameters and/or global
 * variables.  Such a function can be subject to common subexpression
 * elimination and loop optimization just as an arithmetic operator
 * would be.
 * [...]
 */











#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc4.h" 1



/* GCC 4.1.[01] miscompiles __weak */










/*
 * A trick to suppress uninitialized variable warning without generating any
 * code
 */



/* Mark functions as cold. gcc will assume any path leading to a call
   to them will be unlikely.  This means a lot of manual unlikely()s
   are unnecessary now for any paths leading to the usual suspects
   like BUG(), printk(), panic() etc. [but let's keep them for now for
   older compilers]

   Early snapshots of gcc 4.3 don't support this and we can't detect this
   in the preprocessor, but we can live with this because they're unreleased.
   Maketime probing would be overkill here.

   gcc also has a __attribute__((__hot__)) to move hot functions into
   a special section, but I don't see any sense in this right now in
   the kernel context */























#line 89 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 2
#line 44 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2



/* Intel compiler defines __GNUC__. So we will overwrite implementations
 * coming from above header files here
 */
#if definedEx(__INTEL_COMPILER)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 1



#if definedEx(__ECC)
/* Some compiler specific definitions are overwritten here
 * for Intel ECC compiler
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/intrinsics.h" 1
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 2

/* Intel ECC compiler doesn't support gcc specific asm stmts.
 * It uses intrinsics to do the equivalent things.
 */










/* Intel ECC compiler doesn't support __builtin_types_compatible_p() */


#endif

#line 53 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2
#endif
/*
 * Generic compiler-dependent macros required for kernel
 * build go below this comment. Actual compiler/compiler version
 * specific implementations come from the above header files
 */

struct ftrace_branch_data {
	const char *func;
	const char *file;
	unsigned line;
	union {
		struct {
			unsigned long correct;
			unsigned long incorrect;
		};
		struct {
			unsigned long miss;
			unsigned long hit;
		};
		unsigned long miss_hit[2];
	};
};

/*
 * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code
 * to disable branch tracing on a per file basis.
 */























































 


/* Optimization barrier */



/* Unreachable code */
#if (!definedEx(unreachable) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)))

#endif






#endif

#if definedEx(__KERNEL__)
/*
 * Allow us to mark functions as 'deprecated' and have gcc emit a nice
 * warning for each use, in hopes of speeding the functions removal.
 * Usage is:
 * 		int __deprecated foo(void)
 */



#if definedEx(MODULE)

#endif
#if !definedEx(MODULE)

#endif



#if !definedEx(CONFIG_ENABLE_MUST_CHECK)


#endif
#if !definedEx(CONFIG_ENABLE_WARN_DEPRECATED)




#endif
/*
 * Allow us to avoid 'defined but not used' warnings on functions and data,
 * as well as force them to be emitted to the assembly file.
 *
 * As of gcc 3.4, static functions that are not marked with attribute((used))
 * may be elided from the assembly file.  As of gcc 3.4, static data not so
 * marked will not be elided, but this may change in a future gcc version.
 *
 * NOTE: Because distributions shipped with a backported unit-at-a-time
 * compiler in gcc 3.3, we must define __used to be __attribute__((used))
 * for gcc >=3.3 instead of 3.4.
 *
 * In prior versions of gcc, such functions and data would be emitted, but
 * would be warned about except with attribute((unused)).
 *
 * Mark functions that are referenced only in inline assembly as __used so
 * the code is emitted even though it appears to be unreferenced.
 */












/*
 * Rather then using noinline to prevent stack consumption, use
 * noinline_for_stack instead.  For documentaiton reasons.
 */





#endif
/*
 * From the GCC manual:
 *
 * Many functions do not examine any values except their arguments,
 * and have no effects except the return value.  Basically this is
 * just slightly more strict class than the `pure' attribute above,
 * since function is not allowed to read global memory.
 *
 * Note that a function that has pointer arguments and examines the
 * data pointed to must _not_ be declared `const'.  Likewise, a
 * function that calls a non-`const' function usually must not be
 * `const'.  It does not make sense for a `const' function to return
 * `void'.
 */
#if !defined(__attribute_const__)

#endif
/*
 * Tell gcc if a function is cold. The compiler will assume any path
 * directly leading to the call is unlikely.
 */

#if !defined(__cold)

#endif
/* Simple shorthand for a section definition */
#if (!definedEx(__section) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(__LINUX_COMPILER_H)))

#endif
/* Are two types/vars the same type (ignoring qualifiers)? */
#if (!definedEx(__same_type) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(__LINUX_COMPILER_H)))

#endif
/* Compile time object size, -1 for unknown */
#if !defined(__compiletime_object_size)

#endif
#if !defined(__compiletime_warning)

#endif
#if !defined(__compiletime_error)

#endif
/*
 * Prevent the compiler from merging or refetching accesses.  The compiler
 * is also forbidden from reordering successive instances of ACCESS_ONCE(),
 * but only when the compiler is aware of some particular ordering.  One way
 * to make the compiler aware of ordering is to put the two invocations of
 * ACCESS_ONCE() in different C statements.
 *
 * This macro does absolutely -nothing- to prevent the CPU from reordering,
 * merging, or refetching absolutely anything at any time.  Its main intended
 * use is to mediate communication between process-level code and irq/NMI
 * handlers, all running on the same CPU.
 */


#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/stddef.h" 2


#if definedEx(__cplusplus)

#endif
#if !definedEx(__cplusplus)

#endif
#if definedEx(__KERNEL__)
enum {
	false	= 0,
	true	= 1
};


#if defined(__compiler_offsetof)

#endif
#if !defined(__compiler_offsetof)

#endif
#endif
#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/posix_types.h" 2

/*
 * This allows for 1024 file descriptors: if NR_OPEN is ever grown
 * beyond that you'll have to change this too. But 1024 fd's seem to be
 * enough even for such "real" unices like OSF/1, so hopefully this is
 * one limit that doesn't have to be changed [again].
 *
 * Note that POSIX wants the FD_CLEAR(fd,fdsetp) defines to be in
 * <sys/time.h> (and thus <linux/time.h>) - but this is a more logical
 * place for them. Solved by having dummy defines in <sys/time.h>.
 */

/*
 * Those macros may have been defined in <gnu/types.h>. But we always
 * use the ones here. 
 */















typedef struct {
	unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];
} __kernel_fd_set;

/* Type of a signal handler.  */
typedef void (*__kernel_sighandler_t)(int);

/* Type of a SYSV IPC key.  */
typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types.h" 1
#if definedEx(__i386__)
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types_32.h" 1
#if (!definedEx(_ASM_X86_POSIX_TYPES_32_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__i386__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))


/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.  Also, we cannot
 * assume GCC is being used.
 */

typedef unsigned long	__kernel_ino_t;
typedef unsigned short	__kernel_mode_t;
typedef unsigned short	__kernel_nlink_t;
typedef long		__kernel_off_t;
typedef int		__kernel_pid_t;
typedef unsigned short	__kernel_ipc_pid_t;
typedef unsigned short	__kernel_uid_t;
typedef unsigned short	__kernel_gid_t;
typedef unsigned int	__kernel_size_t;
typedef int		__kernel_ssize_t;
typedef int		__kernel_ptrdiff_t;
typedef long		__kernel_time_t;
typedef long		__kernel_suseconds_t;
typedef long		__kernel_clock_t;
typedef int		__kernel_timer_t;
typedef int		__kernel_clockid_t;
typedef int		__kernel_daddr_t;
typedef char *		__kernel_caddr_t;
typedef unsigned short	__kernel_uid16_t;
typedef unsigned short	__kernel_gid16_t;
typedef unsigned int	__kernel_uid32_t;
typedef unsigned int	__kernel_gid32_t;

typedef unsigned short	__kernel_old_uid_t;
typedef unsigned short	__kernel_old_gid_t;
typedef unsigned short	__kernel_old_dev_t;


typedef long long	__kernel_loff_t;

typedef struct {
	int	val[2];
} __kernel_fsid_t;


#endif
#line 4 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types.h" 2
#endif
#if !definedEx(__i386__)
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types_64.h" 1
#if (!definedEx(_ASM_X86_POSIX_TYPES_64_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__i386__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))


/*
 * This file is generally used by user-level software, so you need to
 * be a little careful about namespace pollution etc.  Also, we cannot
 * assume GCC is being used.
 */

typedef unsigned long	__kernel_ino_t;
typedef unsigned int	__kernel_mode_t;
typedef unsigned long	__kernel_nlink_t;
typedef long		__kernel_off_t;
typedef int		__kernel_pid_t;
typedef int		__kernel_ipc_pid_t;
typedef unsigned int	__kernel_uid_t;
typedef unsigned int	__kernel_gid_t;
typedef unsigned long	__kernel_size_t;
typedef long		__kernel_ssize_t;
typedef long		__kernel_ptrdiff_t;
typedef long		__kernel_time_t;
typedef long		__kernel_suseconds_t;
typedef long		__kernel_clock_t;
typedef int		__kernel_timer_t;
typedef int		__kernel_clockid_t;
typedef int		__kernel_daddr_t;
typedef char *		__kernel_caddr_t;
typedef unsigned short	__kernel_uid16_t;
typedef unsigned short	__kernel_gid16_t;


typedef long long	__kernel_loff_t;

typedef struct {
	int	val[2];
} __kernel_fsid_t;

typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;

typedef unsigned long	__kernel_old_dev_t;


#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/posix_types.h" 2
#endif
#line 49 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/posix_types.h" 2

#endif
#line 16 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 2

#if definedEx(__KERNEL__)
typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set		fd_set;
typedef __kernel_dev_t		dev_t;
typedef __kernel_ino_t		ino_t;
typedef __kernel_mode_t		mode_t;
typedef __kernel_nlink_t	nlink_t;
typedef __kernel_off_t		off_t;
typedef __kernel_pid_t		pid_t;
typedef __kernel_daddr_t	daddr_t;
typedef __kernel_key_t		key_t;
typedef __kernel_suseconds_t	suseconds_t;
typedef __kernel_timer_t	timer_t;
typedef __kernel_clockid_t	clockid_t;
typedef __kernel_mqd_t		mqd_t;

typedef _Bool			bool;

typedef __kernel_uid32_t	uid_t;
typedef __kernel_gid32_t	gid_t;
typedef __kernel_uid16_t        uid16_t;
typedef __kernel_gid16_t        gid16_t;

typedef unsigned long		uintptr_t;

#if definedEx(CONFIG_UID16)
/* This is defined by include/asm-{arch}/posix_types.h */
typedef __kernel_old_uid_t	old_uid_t;
typedef __kernel_old_gid_t	old_gid_t;
#endif

typedef __kernel_loff_t		loff_t;

/*
 * The following typedefs are also protected by individual ifdefs for
 * historical reasons:
 */
#if (!definedEx(_SIZE_T) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

typedef __kernel_size_t		size_t;
#endif
#if (!definedEx(_SSIZE_T) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

typedef __kernel_ssize_t	ssize_t;
#endif
#if (!definedEx(_PTRDIFF_T) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

typedef __kernel_ptrdiff_t	ptrdiff_t;
#endif
#if (!definedEx(_TIME_T) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

typedef __kernel_time_t		time_t;
#endif
#if (!definedEx(_CLOCK_T) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

typedef __kernel_clock_t	clock_t;
#endif
#if (!definedEx(_CADDR_T) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

typedef __kernel_caddr_t	caddr_t;
#endif
/* bsd */
typedef unsigned char		u_char;
typedef unsigned short		u_short;
typedef unsigned int		u_int;
typedef unsigned long		u_long;

/* sysv */
typedef unsigned char		unchar;
typedef unsigned short		ushort;
typedef unsigned int		uint;
typedef unsigned long		ulong;

#if (!definedEx(__BIT_TYPES_DEFINED__) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))


typedef		__u8		u_int8_t;
typedef		__s8		int8_t;
typedef		__u16		u_int16_t;
typedef		__s16		int16_t;
typedef		__u32		u_int32_t;
typedef		__s32		int32_t;

#endif
typedef		__u8		uint8_t;
typedef		__u16		uint16_t;
typedef		__u32		uint32_t;


typedef		__u64		uint64_t;
typedef		__u64		u_int64_t;
typedef		__s64		int64_t;

/* this is a special 64bit data type that is 8-byte aligned */




/**
 * The type used for indexing onto a disc or disc partition.
 *
 * Linux always considers sectors to be 512 bytes long independently
 * of the devices real block size.
 *
 * blkcnt_t is the type of the inode's block count.
 */
#if definedEx(CONFIG_LBDAF)
typedef u64 sector_t;
typedef u64 blkcnt_t;
#endif
#if !definedEx(CONFIG_LBDAF)
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
#endif
/*
 * The type of an index into the pagecache.  Use a #define so asm/types.h
 * can override it.
 */
#if (!definedEx(pgoff_t) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))

#endif
#endif
/*
 * Below are truly Linux-specific types that should never collide with
 * any application/library that wants linux/types.h.
 */

#if definedEx(__CHECKER__)

#endif
#if !definedEx(__CHECKER__)

#endif
#if definedEx(__CHECK_ENDIAN__)

#endif
#if !definedEx(__CHECK_ENDIAN__)

#endif
typedef __u16 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __le16;
typedef __u16 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __be16;
typedef __u32 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __le32;
typedef __u32 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __be32;
typedef __u64 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __le64;
typedef __u64 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __be64;

typedef __u16 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __sum16;
typedef __u32 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && definedEx(__CHECK_ENDIAN__))))

#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif

#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H)))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || !definedEx(__CHECK_ENDIAN__) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(__CHECK_ENDIAN__))))

#endif
 __wsum;

#if definedEx(__KERNEL__)
typedef unsigned 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif
 gfp_t;
typedef unsigned 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_))) && ((definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))
__attribute__((bitwise))
#endif
#if ((((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)))) && ((!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))))

#endif
 fmode_t;

#if definedEx(CONFIG_PHYS_ADDR_T_64BIT)
typedef u64 phys_addr_t;
#endif
#if !definedEx(CONFIG_PHYS_ADDR_T_64BIT)
typedef u32 phys_addr_t;
#endif
typedef phys_addr_t resource_size_t;

typedef struct {
	volatile int counter;
} atomic_t;

#if definedEx(CONFIG_64BIT)
typedef struct {
	volatile long counter;
} atomic64_t;
#endif
struct ustat {
	__kernel_daddr_t	f_tfree;
	__kernel_ino_t		f_tinode;
	char			f_fname[6];
	char			f_fpack[6];
};

#endif
#endif
#endif
#line 21 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/kobject.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/list.h" 1
#if !definedEx(_LINUX_LIST_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/stddef.h" 1
#if !defined(_LINUX_STDDEF_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1
#if !defined(__LINUX_COMPILER_H)


#if !definedEx(__ASSEMBLY__)
#if definedEx(__CHECKER__)












extern void __chk_user_ptr(const volatile void __attribute__((noderef, address_space(1))) *);
extern void __chk_io_ptr(const volatile void __attribute__((noderef, address_space(2))) *);
#endif
#if !definedEx(__CHECKER__)















#endif
#if definedEx(__KERNEL__)

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 1



/*
 * Common definitions for all gcc versions go here.
 */


/* Optimization barrier */
/* The "volatile" is due to gcc bugs */


/*
 * This macro obfuscates arithmetic on a variable address so that gcc
 * shouldn't recognize the original var, and make assumptions about it.
 *
 * This is needed because the C standard makes it undefined to do
 * pointer arithmetic on "objects" outside their boundaries and the
 * gcc optimizers assume this is the case. In particular they
 * assume such arithmetic does not wrap.
 *
 * A miscompilation has been observed because of this on PPC.
 * To work around it we hide the relationship of the pointer and the object
 * using this macro.
 *
 * Versions of the ppc64 compiler before 4.1 had a bug where use of
 * RELOC_HIDE could trash r30. The bug can be worked around by changing
 * the inline assembly constraint from =g to =r, in this particular
 * case either is valid.
 */





/* &a[0] degrades to a pointer: a different type from an array */



/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old:
 */
#if (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))



#endif




/*
 * it doesn't make sense on ARM (currently the only user of __naked) to trace
 * naked functions because then mcount is called without stack and frame pointer
 * being set up and there is no chance to restore the lr register to the value
 * before mcount was called.
 */




/*
 * From the GCC manual:
 *
 * Many functions have no effects except the return value and their
 * return value depends only on the parameters and/or global
 * variables.  Such a function can be subject to common subexpression
 * elimination and loop optimization just as an arithmetic operator
 * would be.
 * [...]
 */











#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc4.h" 1



/* GCC 4.1.[01] miscompiles __weak */










/*
 * A trick to suppress uninitialized variable warning without generating any
 * code
 */



/* Mark functions as cold. gcc will assume any path leading to a call
   to them will be unlikely.  This means a lot of manual unlikely()s
   are unnecessary now for any paths leading to the usual suspects
   like BUG(), printk(), panic() etc. [but let's keep them for now for
   older compilers]

   Early snapshots of gcc 4.3 don't support this and we can't detect this
   in the preprocessor, but we can live with this because they're unreleased.
   Maketime probing would be overkill here.

   gcc also has a __attribute__((__hot__)) to move hot functions into
   a special section, but I don't see any sense in this right now in
   the kernel context */























#line 89 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 2
#line 44 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2



/* Intel compiler defines __GNUC__. So we will overwrite implementations
 * coming from above header files here
 */
#if definedEx(__INTEL_COMPILER)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 1



#if definedEx(__ECC)
/* Some compiler specific definitions are overwritten here
 * for Intel ECC compiler
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/intrinsics.h" 1
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 2

/* Intel ECC compiler doesn't support gcc specific asm stmts.
 * It uses intrinsics to do the equivalent things.
 */










/* Intel ECC compiler doesn't support __builtin_types_compatible_p() */


#endif

#line 53 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2
#endif
/*
 * Generic compiler-dependent macros required for kernel
 * build go below this comment. Actual compiler/compiler version
 * specific implementations come from the above header files
 */

struct ftrace_branch_data {
	const char *func;
	const char *file;
	unsigned line;
	union {
		struct {
			unsigned long correct;
			unsigned long incorrect;
		};
		struct {
			unsigned long miss;
			unsigned long hit;
		};
		unsigned long miss_hit[2];
	};
};

/*
 * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code
 * to disable branch tracing on a per file basis.
 */























































 


/* Optimization barrier */



/* Unreachable code */
#if !defined(unreachable)

#endif






#endif
#endif
#if definedEx(__KERNEL__)
/*
 * Allow us to mark functions as 'deprecated' and have gcc emit a nice
 * warning for each use, in hopes of speeding the functions removal.
 * Usage is:
 * 		int __deprecated foo(void)
 */
#if !defined(__deprecated)

#endif
#if definedEx(MODULE)

#endif
#if !definedEx(MODULE)

#endif
#if !defined(__must_check)

#endif
#if !definedEx(CONFIG_ENABLE_MUST_CHECK)


#endif
#if !definedEx(CONFIG_ENABLE_WARN_DEPRECATED)




#endif
/*
 * Allow us to avoid 'defined but not used' warnings on functions and data,
 * as well as force them to be emitted to the assembly file.
 *
 * As of gcc 3.4, static functions that are not marked with attribute((used))
 * may be elided from the assembly file.  As of gcc 3.4, static data not so
 * marked will not be elided, but this may change in a future gcc version.
 *
 * NOTE: Because distributions shipped with a backported unit-at-a-time
 * compiler in gcc 3.3, we must define __used to be __attribute__((used))
 * for gcc >=3.3 instead of 3.4.
 *
 * In prior versions of gcc, such functions and data would be emitted, but
 * would be warned about except with attribute((unused)).
 *
 * Mark functions that are referenced only in inline assembly as __used so
 * the code is emitted even though it appears to be unreferenced.
 */
#if !defined(__used)

#endif
#if !defined(__maybe_unused)

#endif
#if !defined(__always_unused)

#endif
#if !defined(noinline)

#endif
/*
 * Rather then using noinline to prevent stack consumption, use
 * noinline_for_stack instead.  For documentaiton reasons.
 */


#if !defined(__always_inline)

#endif
#endif
/*
 * From the GCC manual:
 *
 * Many functions do not examine any values except their arguments,
 * and have no effects except the return value.  Basically this is
 * just slightly more strict class than the `pure' attribute above,
 * since function is not allowed to read global memory.
 *
 * Note that a function that has pointer arguments and examines the
 * data pointed to must _not_ be declared `const'.  Likewise, a
 * function that calls a non-`const' function usually must not be
 * `const'.  It does not make sense for a `const' function to return
 * `void'.
 */
#if !defined(__attribute_const__)

#endif
/*
 * Tell gcc if a function is cold. The compiler will assume any path
 * directly leading to the call is unlikely.
 */

#if !defined(__cold)

#endif
/* Simple shorthand for a section definition */
#if !defined(__section)

#endif
/* Are two types/vars the same type (ignoring qualifiers)? */
#if !defined(__same_type)

#endif
/* Compile time object size, -1 for unknown */
#if !defined(__compiletime_object_size)

#endif
#if !defined(__compiletime_warning)

#endif
#if !defined(__compiletime_error)

#endif
/*
 * Prevent the compiler from merging or refetching accesses.  The compiler
 * is also forbidden from reordering successive instances of ACCESS_ONCE(),
 * but only when the compiler is aware of some particular ordering.  One way
 * to make the compiler aware of ordering is to put the two invocations of
 * ACCESS_ONCE() in different C statements.
 *
 * This macro does absolutely -nothing- to prevent the CPU from reordering,
 * merging, or refetching absolutely anything at any time.  Its main intended
 * use is to mediate communication between process-level code and irq/NMI
 * handlers, all running on the same CPU.
 */


#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/stddef.h" 2


#if definedEx(__cplusplus)

#endif
#if !definedEx(__cplusplus)

#endif
#if definedEx(__KERNEL__)
enum {
	false	= 0,
	true	= 1
};


#if defined(__compiler_offsetof)

#endif
#if !defined(__compiler_offsetof)

#endif
#endif
#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/list.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/poison.h" 1
#if !definedEx(_LINUX_POISON_H)


/********** include/linux/list.h **********/

/*
 * Architectures might want to move the poison pointer offset
 * into some well-recognized area such as 0xdead000000000000,
 * that is also not mappable by user-space exploits:
 */


 

/*
 * These are non-NULL pointers that will result in page faults
 * under normal circumstances, used to verify that nobody uses
 * non-initialized list entries.
 */



/********** include/linux/timer.h **********/
/*
 * Magic number "tsta" to indicate a static timer initializer
 * for the object debugging code.
 */


/********** mm/debug-pagealloc.c **********/


/********** mm/slab.c **********/
/*
 * Magic nums for obj red zoning.
 * Placed in the first word before and the first word after an obj.
 */






/* ...and for poisoning */




/********** arch/$ARCH/mm/init.c **********/


/********** arch/ia64/hp/common/sba_iommu.c **********/
/*
 * arch/ia64/hp/common/sba_iommu.c uses a 16-byte poison string with a
 * value of "SBAIOMMU POISON\0" for spill-over poisoning.
 */

/********** fs/jbd/journal.c **********/



/********** drivers/base/dmapool.c **********/



/********** drivers/atm/ **********/



/********** net/ **********/



/********** kernel/mutexes **********/



/********** lib/flex_array.c **********/


/********** security/ **********/


/********** sound/oss/ **********/


#endif
#line 7 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/list.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/prefetch.h" 1
/*
 *  Generic cache management functions. Everything is arch-specific,  
 *  but this header exists to make sure the defines/functions can be
 *  used in a generic way.
 *
 *  2000-11-13  Arjan van de Ven   <arjan@fenrus.demon.nl>
 *
 */

#if !definedEx(_LINUX_PREFETCH_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 1



























































































































 

















 



 

















 




	




	



	
	
	
	





#line 15 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/prefetch.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/processor.h" 1
#line 16 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/prefetch.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/cache.h" 1
#line 17 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/prefetch.h" 2

/*
	prefetch(x) attempts to pre-emptively get the memory pointed to
	by address "x" into the CPU L1 cache. 
	prefetch(x) should not cause any kind of exception, prefetch(0) is
	specifically ok.

	prefetch() should be defined by the architecture, if not, the 
	#define below provides a no-op define.	
	
	There are 3 prefetch() macros:
	
	prefetch(x)  	- prefetches the cacheline at "x" for read
	prefetchw(x)	- prefetches the cacheline at "x" for write
	spin_lock_prefetch(x) - prefetches the spinlock *x for taking
	
	there is also PREFETCH_STRIDE which is the architecure-prefered 
	"lookahead" size for prefetching streamed operations.
	
*/

#if !definedEx(ARCH_HAS_PREFETCH)

#endif
#if !definedEx(ARCH_HAS_PREFETCHW)

#endif
#if !definedEx(ARCH_HAS_SPINLOCK_PREFETCH)

#endif
#if !definedEx(PREFETCH_STRIDE)

#endif
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void prefetch_range(void *addr, size_t len)
{
#if definedEx(ARCH_HAS_PREFETCH)
	char *cp;
	char *end = addr + len;

	for (cp = addr; cp < end; cp += 
#if (!definedEx(_LINUX_PREFETCH_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(PREFETCH_STRIDE))
(4*L1_CACHE_BYTES)
#endif
#if (definedEx(_KOBJECT_H_) || definedEx(PREFETCH_STRIDE) || definedEx(_LINUX_PREFETCH_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))
PREFETCH_STRIDE
#endif
)
		prefetch(cp);
#endif
}

#endif
#line 8 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/list.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/system.h" 1
#line 9 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/list.h" 2

/*
 * Simple doubly linked list implementation.
 *
 * Some of the internal functions ("__xxx") are useful when
 * manipulating whole lists rather than single entries, as
 * sometimes we already know the next/prev entries and we can
 * generate better code by using them directly rather than
 * using the generic single-entry routines.
 */

struct list_head {
	struct list_head *next, *prev;
};






static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void INIT_LIST_HEAD(struct list_head *list)
{
	list->next = list;
	list->prev = list;
}

/*
 * Insert a new entry between two known consecutive entries.
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
#if !definedEx(CONFIG_DEBUG_LIST)
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
	next->prev = new;
	new->next = next;
	new->prev = prev;
	prev->next = new;
}
#endif
#if definedEx(CONFIG_DEBUG_LIST)
extern void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next);
#endif
/**
 * list_add - add a new entry
 * @new: new entry to be added
 * @head: list head to add it after
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_add(struct list_head *new, struct list_head *head)
{
	__list_add(new, head, head->next);
}


/**
 * list_add_tail - add a new entry
 * @new: new entry to be added
 * @head: list head to add it before
 *
 * Insert a new entry before the specified head.
 * This is useful for implementing queues.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_add_tail(struct list_head *new, struct list_head *head)
{
	__list_add(new, head->prev, head);
}

/*
 * Delete a list entry by making the prev/next entries
 * point to each other.
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void __list_del(struct list_head * prev, struct list_head * next)
{
	next->prev = prev;
	prev->next = next;
}

/**
 * list_del - deletes entry from list.
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
#if !definedEx(CONFIG_DEBUG_LIST)
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_del(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
	entry->next = 
#if (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(_LINUX_POISON_H))
((void *) 0x00100100 + _AC(1, UL))
#endif
#if (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || definedEx(_LINUX_POISON_H))
LIST_POISON1
#endif
;
	entry->prev = 
#if (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(_LINUX_POISON_H))
((void *) 0x00200200 + _AC(1, UL))
#endif
#if (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || definedEx(_LINUX_POISON_H))
LIST_POISON2
#endif
;
}
#endif
#if definedEx(CONFIG_DEBUG_LIST)
extern void list_del(struct list_head *entry);
#endif
/**
 * list_replace - replace old entry by new one
 * @old : the element to be replaced
 * @new : the new element to insert
 *
 * If @old was empty, it will be overwritten.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_replace(struct list_head *old,
				struct list_head *new)
{
	new->next = old->next;
	new->next->prev = new;
	new->prev = old->prev;
	new->prev->next = new;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_replace_init(struct list_head *old,
					struct list_head *new)
{
	list_replace(old, new);
	INIT_LIST_HEAD(old);
}

/**
 * list_del_init - deletes entry from list and reinitialize it.
 * @entry: the element to delete from the list.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_del_init(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
	INIT_LIST_HEAD(entry);
}

/**
 * list_move - delete from one list and add as another's head
 * @list: the entry to move
 * @head: the head that will precede our entry
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_move(struct list_head *list, struct list_head *head)
{
	__list_del(list->prev, list->next);
	list_add(list, head);
}

/**
 * list_move_tail - delete from one list and add as another's tail
 * @list: the entry to move
 * @head: the head that will follow our entry
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_move_tail(struct list_head *list,
				  struct list_head *head)
{
	__list_del(list->prev, list->next);
	list_add_tail(list, head);
}

/**
 * list_is_last - tests whether @list is the last entry in list @head
 * @list: the entry to test
 * @head: the head of the list
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 int list_is_last(const struct list_head *list,
				const struct list_head *head)
{
	return list->next == head;
}

/**
 * list_empty - tests whether a list is empty
 * @head: the list to test.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 int list_empty(const struct list_head *head)
{
	return head->next == head;
}

/**
 * list_empty_careful - tests whether a list is empty and not being modified
 * @head: the list to test
 *
 * Description:
 * tests whether a list is empty _and_ checks that no other CPU might be
 * in the process of modifying either member (next or prev)
 *
 * NOTE: using list_empty_careful() without synchronization
 * can only be safe if the only activity that can happen
 * to the list entry is list_del_init(). Eg. it cannot be used
 * if another CPU could re-list_add() it.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 int list_empty_careful(const struct list_head *head)
{
	struct list_head *next = head->next;
	return (next == head) && (next == head->prev);
}

/**
 * list_is_singular - tests whether a list has just one entry.
 * @head: the list to test.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 int list_is_singular(const struct list_head *head)
{
	return !list_empty(head) && (head->next == head->prev);
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void __list_cut_position(struct list_head *list,
		struct list_head *head, struct list_head *entry)
{
	struct list_head *new_first = entry->next;
	list->next = head->next;
	list->next->prev = list;
	list->prev = entry;
	entry->next = list;
	head->next = new_first;
	new_first->prev = head;
}

/**
 * list_cut_position - cut a list into two
 * @list: a new list to add all removed entries
 * @head: a list with entries
 * @entry: an entry within head, could be the head itself
 *	and if so we won't cut the list
 *
 * This helper moves the initial part of @head, up to and
 * including @entry, from @head to @list. You should
 * pass on @entry an element you know is on @head. @list
 * should be an empty list or a list you do not care about
 * losing its data.
 *
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_cut_position(struct list_head *list,
		struct list_head *head, struct list_head *entry)
{
	if (list_empty(head))
		return;
	if (list_is_singular(head) &&
		(head->next != entry && head != entry))
		return;
	if (entry == head)
		INIT_LIST_HEAD(list);
	else
		__list_cut_position(list, head, entry);
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void __list_splice(const struct list_head *list,
				 struct list_head *prev,
				 struct list_head *next)
{
	struct list_head *first = list->next;
	struct list_head *last = list->prev;

	first->prev = prev;
	prev->next = first;

	last->next = next;
	next->prev = last;
}

/**
 * list_splice - join two lists, this is designed for stacks
 * @list: the new list to add.
 * @head: the place to add it in the first list.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_splice(const struct list_head *list,
				struct list_head *head)
{
	if (!list_empty(list))
		__list_splice(list, head, head->next);
}

/**
 * list_splice_tail - join two lists, each list being a queue
 * @list: the new list to add.
 * @head: the place to add it in the first list.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_splice_tail(struct list_head *list,
				struct list_head *head)
{
	if (!list_empty(list))
		__list_splice(list, head->prev, head);
}

/**
 * list_splice_init - join two lists and reinitialise the emptied list.
 * @list: the new list to add.
 * @head: the place to add it in the first list.
 *
 * The list at @list is reinitialised
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_splice_init(struct list_head *list,
				    struct list_head *head)
{
	if (!list_empty(list)) {
		__list_splice(list, head, head->next);
		INIT_LIST_HEAD(list);
	}
}

/**
 * list_splice_tail_init - join two lists and reinitialise the emptied list
 * @list: the new list to add.
 * @head: the place to add it in the first list.
 *
 * Each of the lists is a queue.
 * The list at @list is reinitialised
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void list_splice_tail_init(struct list_head *list,
					 struct list_head *head)
{
	if (!list_empty(list)) {
		__list_splice(list, head->prev, head);
		INIT_LIST_HEAD(list);
	}
}

/**
 * list_entry - get the struct for this entry
 * @ptr:	the &struct list_head pointer.
 * @type:	the type of the struct this is embedded in.
 * @member:	the name of the list_struct within the struct.
 */



/**
 * list_first_entry - get the first element from a list
 * @ptr:	the list head to take the element from.
 * @type:	the type of the struct this is embedded in.
 * @member:	the name of the list_struct within the struct.
 *
 * Note, that list is expected to be not empty.
 */



/**
 * list_for_each	-	iterate over a list
 * @pos:	the &struct list_head to use as a loop cursor.
 * @head:	the head for your list.
 */




/**
 * __list_for_each	-	iterate over a list
 * @pos:	the &struct list_head to use as a loop cursor.
 * @head:	the head for your list.
 *
 * This variant differs from list_for_each() in that it's the
 * simplest possible list iteration code, no prefetching is done.
 * Use this for code that knows the list to be very short (empty
 * or 1 entry) most of the time.
 */



/**
 * list_for_each_prev	-	iterate over a list backwards
 * @pos:	the &struct list_head to use as a loop cursor.
 * @head:	the head for your list.
 */




/**
 * list_for_each_safe - iterate over a list safe against removal of list entry
 * @pos:	the &struct list_head to use as a loop cursor.
 * @n:		another &struct list_head to use as temporary storage
 * @head:	the head for your list.
 */




/**
 * list_for_each_prev_safe - iterate over a list backwards safe against removal of list entry
 * @pos:	the &struct list_head to use as a loop cursor.
 * @n:		another &struct list_head to use as temporary storage
 * @head:	the head for your list.
 */





/**
 * list_for_each_entry	-	iterate over list of given type
 * @pos:	the type * to use as a loop cursor.
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 */





/**
 * list_for_each_entry_reverse - iterate backwards over list of given type.
 * @pos:	the type * to use as a loop cursor.
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 */





/**
 * list_prepare_entry - prepare a pos entry for use in list_for_each_entry_continue()
 * @pos:	the type * to use as a start point
 * @head:	the head of the list
 * @member:	the name of the list_struct within the struct.
 *
 * Prepares a pos entry for use as a start point in list_for_each_entry_continue().
 */



/**
 * list_for_each_entry_continue - continue iteration over list of given type
 * @pos:	the type * to use as a loop cursor.
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 *
 * Continue to iterate over list of given type, continuing after
 * the current position.
 */





/**
 * list_for_each_entry_continue_reverse - iterate backwards from the given point
 * @pos:	the type * to use as a loop cursor.
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 *
 * Start to iterate over list of given type backwards, continuing after
 * the current position.
 */





/**
 * list_for_each_entry_from - iterate over list of given type from the current point
 * @pos:	the type * to use as a loop cursor.
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 *
 * Iterate over list of given type, continuing from current position.
 */




/**
 * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry
 * @pos:	the type * to use as a loop cursor.
 * @n:		another type * to use as temporary storage
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 */






/**
 * list_for_each_entry_safe_continue
 * @pos:	the type * to use as a loop cursor.
 * @n:		another type * to use as temporary storage
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 *
 * Iterate over list of given type, continuing after current point,
 * safe against removal of list entry.
 */






/**
 * list_for_each_entry_safe_from
 * @pos:	the type * to use as a loop cursor.
 * @n:		another type * to use as temporary storage
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 *
 * Iterate over list of given type from current point, safe against
 * removal of list entry.
 */





/**
 * list_for_each_entry_safe_reverse
 * @pos:	the type * to use as a loop cursor.
 * @n:		another type * to use as temporary storage
 * @head:	the head for your list.
 * @member:	the name of the list_struct within the struct.
 *
 * Iterate backwards over list of given type, safe against removal
 * of list entry.
 */






/*
 * Double linked lists with a single pointer list head.
 * Mostly useful for hash tables where the two pointer list head is
 * too wasteful.
 * You lose the ability to access the tail in O(1).
 */

struct hlist_head {
	struct hlist_node *first;
};

struct hlist_node {
	struct hlist_node *next, **pprev;
};




static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void INIT_HLIST_NODE(struct hlist_node *h)
{
	h->next = 
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
0
#endif
#if (((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))) && (((definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H)) && ((!definedEx(__cplusplus) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
((void *)0)
#endif
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))) && ((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))))
NULL
#endif
;
	h->pprev = 
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
0
#endif
#if (((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))) && (((definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H)) && ((!definedEx(__cplusplus) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
((void *)0)
#endif
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))) && ((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))))
NULL
#endif
;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 int hlist_unhashed(const struct hlist_node *h)
{
	return !h->pprev;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 int hlist_empty(const struct hlist_head *h)
{
	return !h->first;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void __hlist_del(struct hlist_node *n)
{
	struct hlist_node *next = n->next;
	struct hlist_node **pprev = n->pprev;
	*pprev = next;
	if (next)
		next->pprev = pprev;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void hlist_del(struct hlist_node *n)
{
	__hlist_del(n);
	n->next = 
#if (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(_LINUX_POISON_H))
((void *) 0x00100100 + _AC(1, UL))
#endif
#if (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || definedEx(_LINUX_POISON_H))
LIST_POISON1
#endif
;
	n->pprev = 
#if (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(_LINUX_POISON_H))
((void *) 0x00200200 + _AC(1, UL))
#endif
#if (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || definedEx(_LINUX_POISON_H))
LIST_POISON2
#endif
;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void hlist_del_init(struct hlist_node *n)
{
	if (!hlist_unhashed(n)) {
		__hlist_del(n);
		INIT_HLIST_NODE(n);
	}
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
	struct hlist_node *first = h->first;
	n->next = first;
	if (first)
		first->pprev = &n->next;
	h->first = n;
	n->pprev = &h->first;
}

/* next must be != NULL */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void hlist_add_before(struct hlist_node *n,
					struct hlist_node *next)
{
	n->pprev = next->pprev;
	n->next = next;
	next->pprev = &n->next;
	*(n->pprev) = n;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void hlist_add_after(struct hlist_node *n,
					struct hlist_node *next)
{
	next->next = n->next;
	n->next = next;
	next->pprev = &n->next;

	if(next->next)
		next->next->pprev  = &next->next;
}

/*
 * Move a list from one list head to another. Fixup the pprev
 * reference of the first entry if it exists.
 */
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))
inline
#endif
 void hlist_move_list(struct hlist_head *old,
				   struct hlist_head *new)
{
	new->first = old->first;
	if (new->first)
		new->first->pprev = &new->first;
	old->first = 
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
0
#endif
#if (((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))) && (((definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H)) && ((!definedEx(__cplusplus) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
((void *)0)
#endif
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))) && ((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))))
NULL
#endif
;
}











/**
 * hlist_for_each_entry	- iterate over list of given type
 * @tpos:	the type * to use as a loop cursor.
 * @pos:	the &struct hlist_node to use as a loop cursor.
 * @head:	the head for your list.
 * @member:	the name of the hlist_node within the struct.
 */






/**
 * hlist_for_each_entry_continue - iterate over a hlist continuing after current point
 * @tpos:	the type * to use as a loop cursor.
 * @pos:	the &struct hlist_node to use as a loop cursor.
 * @member:	the name of the hlist_node within the struct.
 */






/**
 * hlist_for_each_entry_from - iterate over a hlist continuing from current point
 * @tpos:	the type * to use as a loop cursor.
 * @pos:	the &struct hlist_node to use as a loop cursor.
 * @member:	the name of the hlist_node within the struct.
 */





/**
 * hlist_for_each_entry_safe - iterate over list of given type safe against removal of list entry
 * @tpos:	the type * to use as a loop cursor.
 * @pos:	the &struct hlist_node to use as a loop cursor.
 * @n:		another &struct hlist_node to use as temporary storage
 * @head:	the head for your list.
 * @member:	the name of the hlist_node within the struct.
 */






#endif
#line 22 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/kobject.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/sysfs.h" 1
/*
 * sysfs.h - definitions for the device driver filesystem
 *
 * Copyright (c) 2001,2002 Patrick Mochel
 * Copyright (c) 2004 Silicon Graphics, Inc.
 * Copyright (c) 2007 SUSE Linux Products GmbH
 * Copyright (c) 2007 Tejun Heo <teheo@suse.de>
 *
 * Please see Documentation/filesystems/sysfs.txt for more information.
 */

#if !definedEx(_SYSFS_H_)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1
#if !defined(__LINUX_COMPILER_H)


#if !definedEx(__ASSEMBLY__)
#if definedEx(__CHECKER__)












extern void __chk_user_ptr(const volatile void __attribute__((noderef, address_space(1))) *);
extern void __chk_io_ptr(const volatile void __attribute__((noderef, address_space(2))) *);
#endif
#if !definedEx(__CHECKER__)















#endif
#if definedEx(__KERNEL__)

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 1



/*
 * Common definitions for all gcc versions go here.
 */


/* Optimization barrier */
/* The "volatile" is due to gcc bugs */


/*
 * This macro obfuscates arithmetic on a variable address so that gcc
 * shouldn't recognize the original var, and make assumptions about it.
 *
 * This is needed because the C standard makes it undefined to do
 * pointer arithmetic on "objects" outside their boundaries and the
 * gcc optimizers assume this is the case. In particular they
 * assume such arithmetic does not wrap.
 *
 * A miscompilation has been observed because of this on PPC.
 * To work around it we hide the relationship of the pointer and the object
 * using this macro.
 *
 * Versions of the ppc64 compiler before 4.1 had a bug where use of
 * RELOC_HIDE could trash r30. The bug can be worked around by changing
 * the inline assembly constraint from =g to =r, in this particular
 * case either is valid.
 */





/* &a[0] degrades to a pointer: a different type from an array */



/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old:
 */
#if (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))



#endif




/*
 * it doesn't make sense on ARM (currently the only user of __naked) to trace
 * naked functions because then mcount is called without stack and frame pointer
 * being set up and there is no chance to restore the lr register to the value
 * before mcount was called.
 */




/*
 * From the GCC manual:
 *
 * Many functions have no effects except the return value and their
 * return value depends only on the parameters and/or global
 * variables.  Such a function can be subject to common subexpression
 * elimination and loop optimization just as an arithmetic operator
 * would be.
 * [...]
 */











#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc4.h" 1



/* GCC 4.1.[01] miscompiles __weak */










/*
 * A trick to suppress uninitialized variable warning without generating any
 * code
 */



/* Mark functions as cold. gcc will assume any path leading to a call
   to them will be unlikely.  This means a lot of manual unlikely()s
   are unnecessary now for any paths leading to the usual suspects
   like BUG(), printk(), panic() etc. [but let's keep them for now for
   older compilers]

   Early snapshots of gcc 4.3 don't support this and we can't detect this
   in the preprocessor, but we can live with this because they're unreleased.
   Maketime probing would be overkill here.

   gcc also has a __attribute__((__hot__)) to move hot functions into
   a special section, but I don't see any sense in this right now in
   the kernel context */























#line 89 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 2
#line 44 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2



/* Intel compiler defines __GNUC__. So we will overwrite implementations
 * coming from above header files here
 */
#if definedEx(__INTEL_COMPILER)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 1



#if definedEx(__ECC)
/* Some compiler specific definitions are overwritten here
 * for Intel ECC compiler
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/intrinsics.h" 1
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 2

/* Intel ECC compiler doesn't support gcc specific asm stmts.
 * It uses intrinsics to do the equivalent things.
 */










/* Intel ECC compiler doesn't support __builtin_types_compatible_p() */


#endif

#line 53 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2
#endif
/*
 * Generic compiler-dependent macros required for kernel
 * build go below this comment. Actual compiler/compiler version
 * specific implementations come from the above header files
 */

struct ftrace_branch_data {
	const char *func;
	const char *file;
	unsigned line;
	union {
		struct {
			unsigned long correct;
			unsigned long incorrect;
		};
		struct {
			unsigned long miss;
			unsigned long hit;
		};
		unsigned long miss_hit[2];
	};
};

/*
 * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code
 * to disable branch tracing on a per file basis.
 */























































 


/* Optimization barrier */



/* Unreachable code */
#if !defined(unreachable)

#endif






#endif
#endif
#if definedEx(__KERNEL__)
/*
 * Allow us to mark functions as 'deprecated' and have gcc emit a nice
 * warning for each use, in hopes of speeding the functions removal.
 * Usage is:
 * 		int __deprecated foo(void)
 */
#if !defined(__deprecated)

#endif
#if definedEx(MODULE)

#endif
#if !definedEx(MODULE)

#endif
#if !defined(__must_check)

#endif
#if !definedEx(CONFIG_ENABLE_MUST_CHECK)


#endif
#if !definedEx(CONFIG_ENABLE_WARN_DEPRECATED)




#endif
/*
 * Allow us to avoid 'defined but not used' warnings on functions and data,
 * as well as force them to be emitted to the assembly file.
 *
 * As of gcc 3.4, static functions that are not marked with attribute((used))
 * may be elided from the assembly file.  As of gcc 3.4, static data not so
 * marked will not be elided, but this may change in a future gcc version.
 *
 * NOTE: Because distributions shipped with a backported unit-at-a-time
 * compiler in gcc 3.3, we must define __used to be __attribute__((used))
 * for gcc >=3.3 instead of 3.4.
 *
 * In prior versions of gcc, such functions and data would be emitted, but
 * would be warned about except with attribute((unused)).
 *
 * Mark functions that are referenced only in inline assembly as __used so
 * the code is emitted even though it appears to be unreferenced.
 */
#if !defined(__used)

#endif
#if !defined(__maybe_unused)

#endif
#if !defined(__always_unused)

#endif
#if !defined(noinline)

#endif
/*
 * Rather then using noinline to prevent stack consumption, use
 * noinline_for_stack instead.  For documentaiton reasons.
 */


#if !defined(__always_inline)

#endif
#endif
/*
 * From the GCC manual:
 *
 * Many functions do not examine any values except their arguments,
 * and have no effects except the return value.  Basically this is
 * just slightly more strict class than the `pure' attribute above,
 * since function is not allowed to read global memory.
 *
 * Note that a function that has pointer arguments and examines the
 * data pointed to must _not_ be declared `const'.  Likewise, a
 * function that calls a non-`const' function usually must not be
 * `const'.  It does not make sense for a `const' function to return
 * `void'.
 */
#if !defined(__attribute_const__)

#endif
/*
 * Tell gcc if a function is cold. The compiler will assume any path
 * directly leading to the call is unlikely.
 */

#if !defined(__cold)

#endif
/* Simple shorthand for a section definition */
#if !defined(__section)

#endif
/* Are two types/vars the same type (ignoring qualifiers)? */
#if !defined(__same_type)

#endif
/* Compile time object size, -1 for unknown */
#if !defined(__compiletime_object_size)

#endif
#if !defined(__compiletime_warning)

#endif
#if !defined(__compiletime_error)

#endif
/*
 * Prevent the compiler from merging or refetching accesses.  The compiler
 * is also forbidden from reordering successive instances of ACCESS_ONCE(),
 * but only when the compiler is aware of some particular ordering.  One way
 * to make the compiler aware of ordering is to put the two invocations of
 * ACCESS_ONCE() in different C statements.
 *
 * This macro does absolutely -nothing- to prevent the CPU from reordering,
 * merging, or refetching absolutely anything at any time.  Its main intended
 * use is to mediate communication between process-level code and irq/NMI
 * handlers, all running on the same CPU.
 */


#endif
#line 17 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/sysfs.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/errno.h" 1
#if !definedEx(_LINUX_ERRNO_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/errno.h" 1
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/errno.h" 1
#if !definedEx(_ASM_GENERIC_ERRNO_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/errno-base.h" 1
#if !definedEx(_ASM_GENERIC_ERRNO_BASE_H)





































#endif
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/errno.h" 2




































































































/* for robust mutexes */





#endif
#line 3 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/errno.h" 2
#line 6 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/errno.h" 2

#if definedEx(__KERNEL__)
/*
 * These should never be seen by user programs.  To return one of ERESTART*
 * codes, signal_pending() MUST be set.  Note that ptrace can observe these
 * at syscall exit tracing, but they will never be left for the debugged user
 * process to see.
 */






/* Defined for the NFSv3 protocol */











#endif
#endif
#line 18 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/sysfs.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/list.h" 1



















	









	
	










			      
			      

	
	
	
	

 
			      
			      











	













	











	
	











	
	
	

 









				

	
	
	
	



					

	
	








	
	









	
	








				  

	
	








				

	








	

















	
	








	



		

	
	
	
	
	
	
	

















		

	
		
	
		
		
	
		
	
		



				 
				 

	
	

	
	

	
	








				

	
		








				

	
		










				    

	
		
		
	











					 

	
		
		
	























































































































































































































	



	







	
	




	




	




	
	
	
	
		




	
	
	




	
		
		
	




	
	
	
		
	
	




					

	
	
	
	



					

	
	
	

	
		







				   

	
	
		
	































































#line 19 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/sysfs.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/atomic.h" 1
#line 20 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/sysfs.h" 2

struct kobject;
struct module;

/* FIXME
 * The *owner field is no longer used.
 * x86 tree has been cleaned up. The owner
 * attribute is still left for other arches.
 */
struct attribute {
	const char		*name;
	struct module		*owner;
	mode_t			mode;
};

struct attribute_group {
	const char		*name;
	mode_t			(*is_visible)(struct kobject *,
					      struct attribute *, int);
	struct attribute	**attrs;
};



/**
 * Use these macros to make defining attributes easier. See include/linux/device.h
 * for examples..
 */
















struct vm_area_struct;

struct bin_attribute {
	struct attribute	attr;
	size_t			size;
	void			*private;
	ssize_t (*read)(struct kobject *, struct bin_attribute *,
			char *, loff_t, size_t);
	ssize_t (*write)(struct kobject *, struct bin_attribute *,
			 char *, loff_t, size_t);
	int (*mmap)(struct kobject *, struct bin_attribute *attr,
		    struct vm_area_struct *vma);
};

struct sysfs_ops {
	ssize_t	(*show)(struct kobject *, struct attribute *,char *);
	ssize_t	(*store)(struct kobject *,struct attribute *,const char *, size_t);
};

struct sysfs_dirent;

#if definedEx(CONFIG_SYSFS)
int sysfs_schedule_callback(struct kobject *kobj, void (*func)(void *),
			    void *data, struct module *owner);

int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_create_dir(struct kobject *kobj);
void sysfs_remove_dir(struct kobject *kobj);
int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_rename_dir(struct kobject *kobj, const char *new_name);
int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_move_dir(struct kobject *kobj,
				struct kobject *new_parent_kobj);

int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_create_file(struct kobject *kobj,
				   const struct attribute *attr);
int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_chmod_file(struct kobject *kobj, struct attribute *attr,
				  mode_t mode);
void sysfs_remove_file(struct kobject *kobj, const struct attribute *attr);

int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_create_bin_file(struct kobject *kobj,
				       const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
			   const struct bin_attribute *attr);

int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_create_link(struct kobject *kobj, struct kobject *target,
				   const char *name);
int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_create_link_nowarn(struct kobject *kobj,
					  struct kobject *target,
					  const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_create_group(struct kobject *kobj,
				    const struct attribute_group *grp);
int sysfs_update_group(struct kobject *kobj,
		       const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
			const struct attribute_group *grp);
int sysfs_add_file_to_group(struct kobject *kobj,
			const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
			const struct attribute *attr, const char *group);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);
void sysfs_notify_dirent(struct sysfs_dirent *sd);
struct sysfs_dirent *sysfs_get_dirent(struct sysfs_dirent *parent_sd,
				      const unsigned char *name);
struct sysfs_dirent *sysfs_get(struct sysfs_dirent *sd);
void sysfs_put(struct sysfs_dirent *sd);
void sysfs_printk_last_file(void);
int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_init(void);

#endif
#if !definedEx(CONFIG_SYSFS)
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_schedule_callback(struct kobject *kobj,
		void (*func)(void *), void *data, struct module *owner)
{
	return -
#if (!definedEx(_SYSFS_H_) && !definedEx(_LINUX_ERRNO_H) && !definedEx(_ASM_GENERIC_ERRNO_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_))
38
#endif
#if (definedEx(_LINUX_ERRNO_H) || definedEx(_KOBJECT_H_) || definedEx(_ASM_GENERIC_ERRNO_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_))
ENOSYS
#endif
;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_create_dir(struct kobject *kobj)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_remove_dir(struct kobject *kobj)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_rename_dir(struct kobject *kobj, const char *new_name)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_move_dir(struct kobject *kobj,
				 struct kobject *new_parent_kobj)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_create_file(struct kobject *kobj,
				    const struct attribute *attr)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_chmod_file(struct kobject *kobj,
				   struct attribute *attr, mode_t mode)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_remove_file(struct kobject *kobj,
				     const struct attribute *attr)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_create_bin_file(struct kobject *kobj,
					const struct bin_attribute *attr)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_remove_bin_file(struct kobject *kobj,
					 const struct bin_attribute *attr)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_create_link(struct kobject *kobj,
				    struct kobject *target, const char *name)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_create_link_nowarn(struct kobject *kobj,
					   struct kobject *target,
					   const char *name)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_remove_link(struct kobject *kobj, const char *name)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_create_group(struct kobject *kobj,
				     const struct attribute_group *grp)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_update_group(struct kobject *kobj,
				const struct attribute_group *grp)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_remove_group(struct kobject *kobj,
				      const struct attribute_group *grp)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int sysfs_add_file_to_group(struct kobject *kobj,
		const struct attribute *attr, const char *group)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_remove_file_from_group(struct kobject *kobj,
		const struct attribute *attr, const char *group)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_notify(struct kobject *kobj, const char *dir,
				const char *attr)
{
}
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_notify_dirent(struct sysfs_dirent *sd)
{
}
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif

struct sysfs_dirent *sysfs_get_dirent(struct sysfs_dirent *parent_sd,
				      const unsigned char *name)
{
	return 
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
0
#endif
#if (((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))) && (((definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H)) && ((!definedEx(__cplusplus) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
((void *)0)
#endif
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))) && ((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))))
NULL
#endif
;
}
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 struct sysfs_dirent *sysfs_get(struct sysfs_dirent *sd)
{
	return 
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && ((definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
0
#endif
#if (((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))) && (((definedEx(_KOBJECT_H_) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H) || defined(_LINUX_STDDEF_H)) && ((!definedEx(__cplusplus) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && (definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H))) && (definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))))
((void *)0)
#endif
#if ((definedEx(_KOBJECT_H_) || definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__cplusplus) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(__cplusplus) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H))) && ((!definedEx(__cplusplus) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H)) || ((definedEx(_KOBJECT_H_) || !definedEx(__cplusplus) || defined(_LINUX_STDDEF_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && !definedEx(__cplusplus) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_IOPORT_H) || (!definedEx(__cplusplus) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_POSIX_TYPES_H) || !definedEx(__cplusplus) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_LINUX_TYPES_H))) || (!definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(_LINUX_STDDEF_H))))))
NULL
#endif
;
}
static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_put(struct sysfs_dirent *sd)
{
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 int 
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && (((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
__attribute__((warn_unused_result))
#endif
#if (((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))

#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_) || defined(__must_check)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || defined(__must_check) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(CONFIG_ENABLE_MUST_CHECK) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)))) && (!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(CONFIG_ENABLE_MUST_CHECK) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__must_check)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!defined(__must_check) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)) || ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !defined(__LINUX_COMPILER_H) && !definedEx(CONFIG_ENABLE_MUST_CHECK)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(CONFIG_ENABLE_MUST_CHECK))))
__must_check
#endif
 sysfs_init(void)
{
	return 0;
}

static 
#if ((definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)))
inline
#endif
 void sysfs_printk_last_file(void)
{
}

#endif
#endif
#line 23 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/kobject.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 1
#if !defined(__LINUX_COMPILER_H)


#if !definedEx(__ASSEMBLY__)
#if definedEx(__CHECKER__)












extern void __chk_user_ptr(const volatile void __attribute__((noderef, address_space(1))) *);
extern void __chk_io_ptr(const volatile void __attribute__((noderef, address_space(2))) *);
#endif
#if !definedEx(__CHECKER__)















#endif
#if definedEx(__KERNEL__)

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 1



/*
 * Common definitions for all gcc versions go here.
 */


/* Optimization barrier */
/* The "volatile" is due to gcc bugs */


/*
 * This macro obfuscates arithmetic on a variable address so that gcc
 * shouldn't recognize the original var, and make assumptions about it.
 *
 * This is needed because the C standard makes it undefined to do
 * pointer arithmetic on "objects" outside their boundaries and the
 * gcc optimizers assume this is the case. In particular they
 * assume such arithmetic does not wrap.
 *
 * A miscompilation has been observed because of this on PPC.
 * To work around it we hide the relationship of the pointer and the object
 * using this macro.
 *
 * Versions of the ppc64 compiler before 4.1 had a bug where use of
 * RELOC_HIDE could trash r30. The bug can be worked around by changing
 * the inline assembly constraint from =g to =r, in this particular
 * case either is valid.
 */





/* &a[0] degrades to a pointer: a different type from an array */



/*
 * Force always-inline if the user requests it so via the .config,
 * or if gcc is too old:
 */
#if (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))



#endif




/*
 * it doesn't make sense on ARM (currently the only user of __naked) to trace
 * naked functions because then mcount is called without stack and frame pointer
 * being set up and there is no chance to restore the lr register to the value
 * before mcount was called.
 */




/*
 * From the GCC manual:
 *
 * Many functions have no effects except the return value and their
 * return value depends only on the parameters and/or global
 * variables.  Such a function can be subject to common subexpression
 * elimination and loop optimization just as an arithmetic operator
 * would be.
 * [...]
 */











#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc4.h" 1



/* GCC 4.1.[01] miscompiles __weak */










/*
 * A trick to suppress uninitialized variable warning without generating any
 * code
 */



/* Mark functions as cold. gcc will assume any path leading to a call
   to them will be unlikely.  This means a lot of manual unlikely()s
   are unnecessary now for any paths leading to the usual suspects
   like BUG(), printk(), panic() etc. [but let's keep them for now for
   older compilers]

   Early snapshots of gcc 4.3 don't support this and we can't detect this
   in the preprocessor, but we can live with this because they're unreleased.
   Maketime probing would be overkill here.

   gcc also has a __attribute__((__hot__)) to move hot functions into
   a special section, but I don't see any sense in this right now in
   the kernel context */























#line 89 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-gcc.h" 2
#line 44 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2



/* Intel compiler defines __GNUC__. So we will overwrite implementations
 * coming from above header files here
 */
#if definedEx(__INTEL_COMPILER)
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 1



#if definedEx(__ECC)
/* Some compiler specific definitions are overwritten here
 * for Intel ECC compiler
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/intrinsics.h" 1
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler-intel.h" 2

/* Intel ECC compiler doesn't support gcc specific asm stmts.
 * It uses intrinsics to do the equivalent things.
 */










/* Intel ECC compiler doesn't support __builtin_types_compatible_p() */


#endif

#line 53 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/compiler.h" 2
#endif
/*
 * Generic compiler-dependent macros required for kernel
 * build go below this comment. Actual compiler/compiler version
 * specific implementations come from the above header files
 */

struct ftrace_branch_data {
	const char *func;
	const char *file;
	unsigned line;
	union {
		struct {
			unsigned long correct;
			unsigned long incorrect;
		};
		struct {
			unsigned long miss;
			unsigned long hit;
		};
		unsigned long miss_hit[2];
	};
};

/*
 * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code
 * to disable branch tracing on a per file basis.
 */























































 


/* Optimization barrier */



/* Unreachable code */
#if !defined(unreachable)

#endif






#endif
#endif
#if definedEx(__KERNEL__)
/*
 * Allow us to mark functions as 'deprecated' and have gcc emit a nice
 * warning for each use, in hopes of speeding the functions removal.
 * Usage is:
 * 		int __deprecated foo(void)
 */
#if !defined(__deprecated)

#endif
#if definedEx(MODULE)

#endif
#if !definedEx(MODULE)

#endif
#if !defined(__must_check)

#endif
#if !definedEx(CONFIG_ENABLE_MUST_CHECK)


#endif
#if !definedEx(CONFIG_ENABLE_WARN_DEPRECATED)




#endif
/*
 * Allow us to avoid 'defined but not used' warnings on functions and data,
 * as well as force them to be emitted to the assembly file.
 *
 * As of gcc 3.4, static functions that are not marked with attribute((used))
 * may be elided from the assembly file.  As of gcc 3.4, static data not so
 * marked will not be elided, but this may change in a future gcc version.
 *
 * NOTE: Because distributions shipped with a backported unit-at-a-time
 * compiler in gcc 3.3, we must define __used to be __attribute__((used))
 * for gcc >=3.3 instead of 3.4.
 *
 * In prior versions of gcc, such functions and data would be emitted, but
 * would be warned about except with attribute((unused)).
 *
 * Mark functions that are referenced only in inline assembly as __used so
 * the code is emitted even though it appears to be unreferenced.
 */
#if !defined(__used)

#endif
#if !defined(__maybe_unused)

#endif
#if !defined(__always_unused)

#endif
#if !defined(noinline)

#endif
/*
 * Rather then using noinline to prevent stack consumption, use
 * noinline_for_stack instead.  For documentaiton reasons.
 */


#if !defined(__always_inline)

#endif
#endif
/*
 * From the GCC manual:
 *
 * Many functions do not examine any values except their arguments,
 * and have no effects except the return value.  Basically this is
 * just slightly more strict class than the `pure' attribute above,
 * since function is not allowed to read global memory.
 *
 * Note that a function that has pointer arguments and examines the
 * data pointed to must _not_ be declared `const'.  Likewise, a
 * function that calls a non-`const' function usually must not be
 * `const'.  It does not make sense for a `const' function to return
 * `void'.
 */
#if !defined(__attribute_const__)

#endif
/*
 * Tell gcc if a function is cold. The compiler will assume any path
 * directly leading to the call is unlikely.
 */

#if !defined(__cold)

#endif
/* Simple shorthand for a section definition */
#if !defined(__section)

#endif
/* Are two types/vars the same type (ignoring qualifiers)? */
#if !defined(__same_type)

#endif
/* Compile time object size, -1 for unknown */
#if !defined(__compiletime_object_size)

#endif
#if !defined(__compiletime_warning)

#endif
#if !defined(__compiletime_error)

#endif
/*
 * Prevent the compiler from merging or refetching accesses.  The compiler
 * is also forbidden from reordering successive instances of ACCESS_ONCE(),
 * but only when the compiler is aware of some particular ordering.  One way
 * to make the compiler aware of ordering is to put the two invocations of
 * ACCESS_ONCE() in different C statements.
 *
 * This macro does absolutely -nothing- to prevent the CPU from reordering,
 * merging, or refetching absolutely anything at any time.  Its main intended
 * use is to mediate communication between process-level code and irq/NMI
 * handlers, all running on the same CPU.
 */


#endif
#line 24 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/kobject.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/spinlock.h" 1
#if !definedEx(__LINUX_SPINLOCK_H)


/*
 * include/linux/spinlock.h - generic spinlock/rwlock declarations
 *
 * here's the role of the various spinlock/rwlock related include files:
 *
 * on SMP builds:
 *
 *  asm/spinlock_types.h: contains the arch_spinlock_t/arch_rwlock_t and the
 *                        initializers
 *
 *  linux/spinlock_types.h:
 *                        defines the generic type and initializers
 *
 *  asm/spinlock.h:       contains the arch_spin_*()/etc. lowlevel
 *                        implementations, mostly inline assembly code
 *
 *   (also included on UP-debug builds:)
 *
 *  linux/spinlock_api_smp.h:
 *                        contains the prototypes for the _spin_*() APIs.
 *
 *  linux/spinlock.h:     builds the final spin_*() APIs.
 *
 * on UP builds:
 *
 *  linux/spinlock_type_up.h:
 *                        contains the generic, simplified UP spinlock type.
 *                        (which is an empty structure on non-debug builds)
 *
 *  linux/spinlock_types.h:
 *                        defines the generic type and initializers
 *
 *  linux/spinlock_up.h:
 *                        contains the arch_spin_*()/etc. version of UP
 *                        builds. (which are NOPs on non-debug, non-preempt
 *                        builds)
 *
 *   (included on UP-non-debug builds:)
 *
 *  linux/spinlock_api_up.h:
 *                        builds the _spin_*() APIs.
 *
 *  linux/spinlock.h:     builds the final spin_*() APIs.
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/typecheck.h" 1
#if !definedEx(TYPECHECK_H_INCLUDED)


/*
 * Check at compile time that something is of a particular type.
 * Always evaluates to 1 so you may use it easily in comparisons.
 */







/*
 * Check at compile time that 'function' is a certain type, or is a pointer
 * to that type (needs to use typedef for the function type.)
 */





#endif
#line 51 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/spinlock.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/preempt.h" 1
#if !definedEx(__LINUX_PREEMPT_H)


/*
 * include/linux/preempt.h - macros for accessing and manipulating
 * preempt_count (used for kernel preemption, interrupt count, etc.)
 */

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/thread_info.h" 1
/* thread_info.h: common low-level thread information accessors
 *
 * Copyright (C) 2002  David Howells (dhowells@redhat.com)
 * - Incorporating suggestions made by Linus Torvalds
 */

#if !definedEx(_LINUX_THREAD_INFO_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/types.h" 1



























































































































 

















 



 

















 




	




	



	
	
	
	





#line 12 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/thread_info.h" 2

struct timespec;
struct compat_timespec;

/*
 * System call restart block.
 */
struct restart_block {
	long (*fn)(struct restart_block *);
	union {
		struct {
			unsigned long arg0, arg1, arg2, arg3;
		};
		/* For futex_wait and futex_wait_requeue_pi */
		struct {
			u32 *uaddr;
			u32 val;
			u32 flags;
			u32 bitset;
			u64 time;
			u32 *uaddr2;
		} futex;
		/* For nanosleep */
		struct {
			clockid_t index;
			struct timespec 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(__CHECKER__) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)))) || (!definedEx(_SYSFS_H_) && definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || (definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
__attribute__((noderef, address_space(1)))
#endif
#if (((!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_)))))))))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)))) || (!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__))))

#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(__CHECKER__) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H))))))))) && ((!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_)))))))))))
__user
#endif
 *rmtp;
#if definedEx(CONFIG_COMPAT)
			struct compat_timespec 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(__CHECKER__) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)))) || (!definedEx(_SYSFS_H_) && definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || (definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
__attribute__((noderef, address_space(1)))
#endif
#if (((!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_)))))))))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)))) || (!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__))))

#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(__CHECKER__) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H))))))))) && ((!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_)))))))))))
__user
#endif
 *compat_rmtp;
#endif
			u64 expires;
		} nanosleep;
		/* For poll */
		struct {
			struct pollfd 
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(__CHECKER__) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (((definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && definedEx(__CHECKER__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)))) || (!definedEx(_SYSFS_H_) && definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)))) || (definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
__attribute__((noderef, address_space(1)))
#endif
#if (((!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_)))))))))) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)))) || (!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)))) || (!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__))))

#endif
#if ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_SYSFS_H_) && definedEx(__CHECKER__) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || definedEx(__CHECKER__) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && ((definedEx(__CHECKER__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(__CHECKER__) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(__CHECKER__) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && definedEx(__CHECKER__) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H))))))))) && ((!defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && ((!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && ((!definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !defined(__LINUX_COMPILER_H)) || ((definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H)) || ((definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__CHECKER__) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H)) || definedEx(__LINUX_COMPILER_H) || !definedEx(__CHECKER__) || definedEx(_DEVICE_H_)))))))))))
__user
#endif
 *ufds;
			int nfds;
			int has_timeout;
			unsigned long tv_sec;
			unsigned long tv_nsec;
		} poll;
	};
};

extern long do_no_restart_syscall(struct restart_block *parm);

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/bitops.h" 1
#if !definedEx(_LINUX_BITOPS_H)

#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/types.h" 1
#if !defined(_ASM_X86_TYPES_H)




#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/types.h" 1
#if !defined(_ASM_GENERIC_TYPES_H)

/*
 * int-ll64 is used practically everywhere now,
 * so use it as a reasonable default.
 */
#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/int-ll64.h" 1
/*
 * asm-generic/int-ll64.h
 *
 * Integer declarations for architectures which use "long long"
 * for 64-bit types.
 */

#if !defined(_ASM_GENERIC_INT_LL64_H)


#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitsperlong.h" 1
#if !defined(__ASM_X86_BITSPERLONG_H)




 

#line 1 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/bitsperlong.h" 1
#if !defined(__ASM_GENERIC_BITS_PER_LONG)


/*
 * There seems to be no way of detecting this automatically from user
 * space, so 64 bit architectures should override this in their
 * bitsperlong.h. In particular, an architecture that supports
 * both 32 and 64 bit user space must not rely on CONFIG_64BIT
 * to decide it, but rather check a compiler provided macro.
 */



#if definedEx(__KERNEL__)
#if definedEx(CONFIG_64BIT)

#endif
#if !definedEx(CONFIG_64BIT)

#endif
/*
 * FIXME: The check currently breaks x86-64 build, so it's
 * temporarily disabled. Please fix x86-64 and reenable
 */



#endif
#endif
#line 12 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitsperlong.h" 2

#endif
#line 13 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/int-ll64.h" 2

#if !definedEx(__ASSEMBLY__)
/*
 * __xx is ok: it doesn't pollute the POSIX namespace. Use these in the
 * header files exported to user space
 */

typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
 


#endif
#if definedEx(__KERNEL__)
#if !definedEx(__ASSEMBLY__)
typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;










#endif
#if definedEx(__ASSEMBLY__)









#endif
#endif
#endif
#line 9 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/asm-generic/types.h" 2

#if !definedEx(__ASSEMBLY__)
typedef unsigned short umode_t;

#endif
/*
 * These aren't exported outside the kernel to avoid name space clashes
 */
#if definedEx(__KERNEL__)
#if !definedEx(__ASSEMBLY__)
/*
 * DMA addresses may be very different from physical addresses
 * and pointers. i386 and powerpc may have 64 bit DMA on 32 bit
 * systems, while sparc64 uses 32 bit DMA addresses for 64 bit
 * physical addresses.
 * This default defines dma_addr_t to have the same size as
 * phys_addr_t, which is the most common way.
 * Do not define the dma64_addr_t type, which never really
 * worked.
 */



 


#endif
#endif
#endif
#line 8 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/types.h" 2


#endif
#line 5 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/bitops.h" 2

#if definedEx(__KERNEL__)





#endif
/*
 * Include this here because some architectures need generic_ffs/fls in
 * scope
 */
#line 1 "/Users/Flavio/Desktop/Project/Linux/systems/redhat/usr/include/asm/bitops.h" 1
#line 19 "/Users/Flavio/Desktop/Project/Linux/linux-2.6.33.3/include/linux/bitops.h" 2







static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
__inline__ __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
__inline__
#endif
 int get_bitmask_order(unsigned int count)
{
	int order;
	
	order = fls(count);
	return order;	/* We could be slightly more clever with -1 here... */
}

static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
__inline__ __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
__inline__
#endif
 int get_count_order(unsigned int count)
{
	int order;
	
	order = fls(count) - 1;
	if (count & (count - 1))
		order++;
	return order;
}

static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 unsigned long hweight_long(unsigned long w)
{
	return sizeof(w) == 4 ? hweight32(w) : hweight64(w);
}

/**
 * rol32 - rotate a 32-bit value left
 * @word: value to rotate
 * @shift: bits to roll
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 __u32 rol32(__u32 word, unsigned int shift)
{
	return (word << shift) | (word >> (32 - shift));
}

/**
 * ror32 - rotate a 32-bit value right
 * @word: value to rotate
 * @shift: bits to roll
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 __u32 ror32(__u32 word, unsigned int shift)
{
	return (word >> shift) | (word << (32 - shift));
}

/**
 * rol16 - rotate a 16-bit value left
 * @word: value to rotate
 * @shift: bits to roll
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 __u16 rol16(__u16 word, unsigned int shift)
{
	return (word << shift) | (word >> (16 - shift));
}

/**
 * ror16 - rotate a 16-bit value right
 * @word: value to rotate
 * @shift: bits to roll
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 __u16 ror16(__u16 word, unsigned int shift)
{
	return (word >> shift) | (word << (16 - shift));
}

/**
 * rol8 - rotate an 8-bit value left
 * @word: value to rotate
 * @shift: bits to roll
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 __u8 rol8(__u8 word, unsigned int shift)
{
	return (word << shift) | (word >> (8 - shift));
}

/**
 * ror8 - rotate an 8-bit value right
 * @word: value to rotate
 * @shift: bits to roll
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 __u8 ror8(__u8 word, unsigned int shift)
{
	return (word >> shift) | (word << (8 - shift));
}

static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 unsigned fls_long(unsigned long l)
{
	if (sizeof(l) == 4)
		return fls(l);
	return fls64(l);
}

/**
 * __ffs64 - find first set bit in a 64 bit word
 * @word: The 64 bit word
 *
 * On 64 bit arches this is a synomyn for __ffs
 * The result is not defined if no bits are set, so check that @word
 * is non-zero before calling this.
 */
static 
#if ((!defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !defined(_LINUX_STDDEF_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_LIST_H) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING)) && !defined(__LINUX_COMPILER_H)) || (definedEx(__KERNEL__) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_LINUX_POSIX_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H)) && !definedEx(_KOBJECT_H_) && !definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_STDDEF_H) && !definedEx(__ASSEMBLY__) && !definedEx(__LINUX_COMPILER_H) && !definedEx(_LINUX_TYPES_H) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))) || (!definedEx(_SYSFS_H_) && !defined(__LINUX_COMPILER_H) && definedEx(__KERNEL__) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && (!definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) || !definedEx(CONFIG_OPTIMIZE_INLINING))))
inline __attribute__((always_inline))
#endif
#if ((!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_IOPORT_H) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(_LINUX_STDDEF_H) || defined(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_LIST_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_DEVICE_H_) || defined(__LINUX_COMPILER_H)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || definedEx(_KOBJECT_H_) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || defined(__LINUX_COMPILER_H) || definedEx(_SYSFS_H_) || definedEx(_DEVICE_H_)) && (!definedEx(__KERNEL__) || definedEx(__ASSEMBLY__) || (!definedEx(_LINUX_POSIX_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_STDDEF_H) || (definedEx(CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING) && definedEx(CONFIG_OPTIMIZE_INLINING)) || definedEx(_LINUX_POSIX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || definedEx(__LINUX_COMPILER_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__))))
inline
#endif
 unsigned long __ffs64(u64 word)
{
#if ((((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_BITOPS_H) || !definedEx(CONFIG_64BIT) || defined(_ASM_GENERIC_INT_LL64_H) || definedEx(_LINUX_THREAD_INFO_H) || definedEx(__LINUX_PREEMPT_H) || definedEx(__LINUX_SPINLOCK_H) || defined(_ASM_X86_TYPES_H) || defined(__ASM_X86_BITSPERLONG_H) || definedEx(_DEVICE_H_) || defined(_ASM_GENERIC_TYPES_H) || defined(__ASM_GENERIC_BITS_PER_LONG)) && ((!definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(CONFIG_64BIT) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && definedEx(__KERNEL__) && (definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(_KOBJECT_H_) || (!definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || !definedEx(CONFIG_64BIT) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_ASM_GENERIC_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_DEVICE_H_) || (!definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || (!definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_ASM_X86_TYPES_H)) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && !definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(CONFIG_64BIT) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H))))) || (!defined(_ASM_X86_TYPES_H) && !defined(_ASM_GENERIC_TYPES_H) && !definedEx(CONFIG_64BIT) && !defined(_ASM_GENERIC_INT_LL64_H) && !definedEx(__LINUX_PREEMPT_H) && !definedEx(_LINUX_BITOPS_H) && definedEx(__KERNEL__) && !definedEx(_LINUX_THREAD_INFO_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__ASM_GENERIC_BITS_PER_LONG) && !defined(__ASM_X86_BITSPERLONG_H) && !definedEx(__LINUX_SPINLOCK_H))) && ((!defined(_ASM_X86_TYPES_H) && !defined(_ASM_GENERIC_TYPES_H) && !definedEx(CONFIG_64BIT) && !defined(_ASM_GENERIC_INT_LL64_H) && !definedEx(__LINUX_PREEMPT_H) && !definedEx(_LINUX_BITOPS_H) && definedEx(__KERNEL__) && !definedEx(_LINUX_THREAD_INFO_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__ASM_GENERIC_BITS_PER_LONG) && !defined(__ASM_X86_BITSPERLONG_H) && !definedEx(__LINUX_SPINLOCK_H)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_BITOPS_H) || !definedEx(CONFIG_64BIT) || defined(_ASM_GENERIC_INT_LL64_H) || definedEx(_LINUX_THREAD_INFO_H) || definedEx(__LINUX_PREEMPT_H) || definedEx(__LINUX_SPINLOCK_H) || defined(_ASM_X86_TYPES_H) || defined(__ASM_X86_BITSPERLONG_H) || definedEx(_DEVICE_H_) || defined(_ASM_GENERIC_TYPES_H) || defined(__ASM_GENERIC_BITS_PER_LONG)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && !definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(CONFIG_64BIT) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H))) || ((definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(_KOBJECT_H_) || (!definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || !definedEx(CONFIG_64BIT) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_ASM_GENERIC_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_DEVICE_H_) || (!definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || (!definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(__ASSEMBLY__) || !definedEx(CONFIG_64BIT) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || (!definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(CONFIG_64BIT) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && definedEx(__KERNEL__) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))))))
	if (((u32)word) == 0UL)
		return __ffs((u32)(word >> 32)) + 32;
#endif
#if ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_BITOPS_H) || defined(_ASM_GENERIC_INT_LL64_H) || definedEx(_LINUX_THREAD_INFO_H) || definedEx(__LINUX_PREEMPT_H) || definedEx(__LINUX_SPINLOCK_H) || defined(_ASM_X86_TYPES_H) || defined(__ASM_X86_BITSPERLONG_H) || definedEx(_DEVICE_H_) || definedEx(CONFIG_64BIT) || defined(_ASM_GENERIC_TYPES_H) || defined(__ASM_GENERIC_BITS_PER_LONG)) && ((!defined(_ASM_X86_TYPES_H) && !defined(_ASM_GENERIC_TYPES_H) && !defined(_ASM_GENERIC_INT_LL64_H) && !definedEx(__LINUX_PREEMPT_H) && !definedEx(_LINUX_BITOPS_H) && definedEx(__KERNEL__) && !definedEx(_LINUX_THREAD_INFO_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__ASM_GENERIC_BITS_PER_LONG) && definedEx(CONFIG_64BIT) && !defined(__ASM_X86_BITSPERLONG_H) && !definedEx(__LINUX_SPINLOCK_H)) || ((definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(_KOBJECT_H_) || (!definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_ASM_GENERIC_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_DEVICE_H_) || (!definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(CONFIG_64BIT) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || (!definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(__ASSEMBLY__) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || ((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && !definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && definedEx(CONFIG_64BIT) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H))) || definedEx(_DEVICE_H_) || definedEx(CONFIG_64BIT) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))) && ((!defined(_ASM_X86_TYPES_H) && !defined(_ASM_GENERIC_TYPES_H) && !definedEx(CONFIG_64BIT) && !defined(_ASM_GENERIC_INT_LL64_H) && !definedEx(__LINUX_PREEMPT_H) && !definedEx(_LINUX_BITOPS_H) && definedEx(__KERNEL__) && !definedEx(_LINUX_THREAD_INFO_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !defined(__ASM_GENERIC_BITS_PER_LONG) && !defined(__ASM_X86_BITSPERLONG_H) && !definedEx(__LINUX_SPINLOCK_H)) || ((!definedEx(__KERNEL__) || definedEx(_KOBJECT_H_) || definedEx(_LINUX_BITOPS_H) || !definedEx(CONFIG_64BIT) || defined(_ASM_GENERIC_INT_LL64_H) || definedEx(_LINUX_THREAD_INFO_H) || definedEx(__LINUX_PREEMPT_H) || definedEx(__LINUX_SPINLOCK_H) || defined(_ASM_X86_TYPES_H) || defined(__ASM_X86_BITSPERLONG_H) || definedEx(_DEVICE_H_) || defined(_ASM_GENERIC_TYPES_H) || defined(__ASM_GENERIC_BITS_PER_LONG)) && (((definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && !definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(CONFIG_64BIT) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && (definedEx(_LINUX_IOPORT_H) || definedEx(_DEVICE_H_) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_TYPES_H)) && definedEx(__KERNEL__) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_KOBJECT_H_) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(_ASM_GENERIC_INT_LL64_H) || definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(__ASSEMBLY__) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H))) || ((definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(_KOBJECT_H_) || (!definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || !definedEx(CONFIG_64BIT) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_ASM_GENERIC_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H)) || (!definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_DEVICE_H_) || (!definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_LINUX_TYPES_H) || (!definedEx(_LINUX_IOPORT_H) && !definedEx(_DEVICE_H_) && !definedEx(__ASSEMBLY__)) || (!definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_ASM_X86_TYPES_H)) && (definedEx(_ASM_GENERIC_INT_LL64_H) || !definedEx(__KERNEL__) || definedEx(__ASM_GENERIC_BITS_PER_LONG) || definedEx(__ASSEMBLY__) || !definedEx(CONFIG_64BIT) || definedEx(__ASM_X86_BITSPERLONG_H) || definedEx(_LINUX_IOPORT_H) || definedEx(_ASM_GENERIC_TYPES_H) || (!definedEx(__ASM_GENERIC_BITS_PER_LONG) && !definedEx(CONFIG_64BIT) && !definedEx(__ASM_X86_BITSPERLONG_H) && !definedEx(_ASM_GENERIC_INT_LL64_H) && definedEx(__KERNEL__) && !definedEx(_ASM_GENERIC_TYPES_H) && !definedEx(_DEVICE_H_) && !definedEx(_LINUX_IOPORT_H) && !definedEx(__ASSEMBLY__) && !definedEx(_LINUX_TYPES_H) && !definedEx(_ASM_X86_TYPES_H)) || definedEx(_DEVICE_H_) || definedEx(_LINUX_TYPES_H) || definedEx(_ASM_X86_TYPES_H)))))))
