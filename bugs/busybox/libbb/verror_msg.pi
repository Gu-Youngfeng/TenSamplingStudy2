#line 1 "/Users/Flavio/Desktop/Project/Busybox/platform-redhat.h" 1
//Generated with:
//echo -|gcc -dM - -E -std=gnu99 







































































































































#line 1 "/Users/Flavio/Desktop/Workspaces/FSE15/SamplingConstraints/bugs/busybox/libbb/verror_msg.c" 1
/* vi: set sw=4 ts=4: */
/*
 * Utility routines.
 *
 * Copyright (C) 1999-2004 by Erik Andersen <andersen@codepoet.org>
 *
 * Licensed under GPLv2 or later, see file LICENSE in this source tree.
 */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/libbb.h" 1
/* vi: set sw=4 ts=4: */
/*
 * Busybox main internal header file
 *
 * Based in part on code from sash, Copyright (c) 1999 by David I. Bell
 * Permission has been granted to redistribute this code under GPL.
 *
 * Licensed under GPLv2, see file LICENSE in this source tree.
 */
#if !definedEx(LIBBB_H)


#line 1 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/platform.h" 1
/* vi: set sw=4 ts=4: */
/*
 * Copyright 2006, Bernhard Reutner-Fischer
 *
 * Licensed under GPLv2 or later, see file LICENSE in this source tree.
 */
#if !definedEx(BB_PLATFORM_H)


/* Assume all these functions exist by default.  Platforms where it is not
 * true will #undef them below.
 */










/* Convenience macros to test the version of gcc. */




 

/* __restrict is known in EGCS 1.2 and above. */





/* Define macros for some gcc attributes.  This permits us to use the
   macros freely, and know that they will come into play for the
   version of gcc in which they are supported.  */









 
 

#if !definedEx(__const)

#endif


/* "The malloc attribute is used to tell the compiler that a function
 * may be treated as if any non-NULL pointer it returns cannot alias
 * any other pointer valid when the function returns. This will often
 * improve optimization. Standard functions with this property include
 * malloc and calloc. realloc-like functions have this property as long
 * as the old pointer is never referred to (including comparing it
 * to the new pointer) after the function returns a non-NULL value."
 */




/* __NO_INLINE__: some gcc's do not honor inlining! :( */







 


 




/* -fwhole-program makes all symbols local. The attribute externally_visible
   forces a symbol global.  */


//__attribute__ ((__externally_visible__))
 

/* At 4.4 gcc become much more anal about this, need to use "aliased" types */


 

/* We use __extension__ in some places to suppress -pedantic warnings
   about GCC extensions.  This feature didn't work properly before
   gcc 2.8.  */





/* gcc-2.95 had no va_copy but only __va_copy. */






/* FAST_FUNC is a qualifier which (possibly) makes function call faster
 * and/or smaller by using modified ABI. It is usually only needed
 * on non-static, busybox internal functions. Recent versions of gcc
 * optimize statics automatically. FAST_FUNC on static is required
 * only if you need to match a function pointer's type */
#if definedEx(i386)
/* stdcall makes callee to pop arguments from stack, not caller */

/* #elif ... - add your favorite arch today! */
#endif
#if !definedEx(i386)

#endif
/* Make all declarations hidden (-fvisibility flag only affects definitions) */
/* (don't include system headers after this until corresponding pop!) */



 


/* ---- Endian Detection ------------------------------------ */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/limits.h" 1
/* This administrivia gets added to the beginning of limits.h
   if the system has its own version of limits.h.  */

/* We use _GCC_LIMITS_H_ because we want this not to match
   any macros that the system's limits.h uses for its own purposes.  */
#if !definedEx(_GCC_LIMITS_H_)


#if !definedEx(_LIBC_LIMITS_H_)
/* Use "..." so that we find syslimits.h only in this same directory.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/syslimits.h" 1
/* syslimits.h stands for the system's own limits.h file.
   If we can use it ok unmodified, then we install this text.
   If fixincludes fixes it, then the fixed version is installed
   instead of this text.  */


#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 1
/* Copyright (C) 1991, 1992, 1996, 1997, 1998, 1999, 2000, 2005
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 *	ISO C99 Standard: 7.10/5.2.4.2.1 Sizes of integer types	<limits.h>
 */




#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 1
/* Copyright (C) 1991-1993,1995-2007,2009,2010 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#if !definedEx(_FEATURES_H)


/* These are defined by the user (or the compiler)
   to specify the desired environment:

   __STRICT_ANSI__	ISO Standard C.
   _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
   _POSIX_SOURCE	IEEE Std 1003.1.
   _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
			if >=199309L, add IEEE Std 1003.1b-1993;
			if >=199506L, add IEEE Std 1003.1c-1995;
			if >=200112L, all of IEEE 1003.1-2004
			if >=200809L, all of IEEE 1003.1-2008
   _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
			Single Unix conformance is wanted, to 600 for the
			sixth revision, to 700 for the seventh revision.
   _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
   _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
   _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
   _FILE_OFFSET_BITS=N	Select default filesystem interface.
   _BSD_SOURCE		ISO C, POSIX, and 4.3BSD things.
   _SVID_SOURCE		ISO C, POSIX, and SVID things.
   _ATFILE_SOURCE	Additional *at interfaces.
   _GNU_SOURCE		All of the above, plus GNU extensions.
   _REENTRANT		Select additionally reentrant object.
   _THREAD_SAFE		Same as _REENTRANT, often used by other systems.
   _FORTIFY_SOURCE	If set to numeric value > 0 additional security
			measures are defined, according to level.

   The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
   If none of these are defined, the default is to have _SVID_SOURCE,
   _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
   200112L.  If more than one of these are defined, they accumulate.
   For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
   together give you ISO C, 1003.1, and 1003.2, but nothing else.

   These are defined by this file and are used by the
   header files to decide what to declare or define:

   __USE_ISOC99		Define ISO C99 things.
   __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
   __USE_POSIX		Define IEEE Std 1003.1 things.
   __USE_POSIX2		Define IEEE Std 1003.2 things.
   __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
   __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
   __USE_XOPEN		Define XPG things.
   __USE_XOPEN_EXTENDED	Define X/Open Unix things.
   __USE_UNIX98		Define Single Unix V2 things.
   __USE_XOPEN2K        Define XPG6 things.
   __USE_XOPEN2KXSI     Define XPG6 XSI things.
   __USE_XOPEN2K8XSI    Define XPG7 XSI things.
   __USE_LARGEFILE	Define correct standard I/O things.
   __USE_LARGEFILE64	Define LFS things with separate names.
   __USE_FILE_OFFSET64	Define 64bit interface as default.
   __USE_BSD		Define 4.3BSD things.
   __USE_SVID		Define SVID things.
   __USE_MISC		Define things common to BSD and System V Unix.
   __USE_ATFILE		Define *at interfaces and AT_* constants for them.
   __USE_GNU		Define GNU extensions.
   __USE_REENTRANT	Define reentrant/thread-safe *_r functions.
   __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
   __FAVOR_BSD		Favor 4.3BSD things in cases of conflict.

   The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   only for compatibility.  All new code should use the other symbols
   to test for features.

   All macros listed above as possibly being defined by this file are
   explicitly undefined if they are not explicitly defined.
   Feature-test macros that are not defined by the user or compiler
   but are implied by the other feature-test macros defined (or by the
   lack of any definitions) are defined by the file.  */


/* Undefine everything, so we get a clean slate.  */


























/* Suppress kernel-name space pollution unless user expressedly asks
   for it.  */
#if !definedEx(_LOOSE_KERNEL_NAMES)

#endif
/* Always use ISO C things.  */


/* Convenience macros to test the versions of glibc and gcc.
   Use them like this:
   #if __GNUC_PREREQ (2,8)
   ... code requiring gcc 2.8 or later ...
   #endif
   Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   were not defined then.  */



 

/* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
#if (!definedEx(_POSIX_SOURCE) && !definedEx(_GNU_SOURCE) && definedEx(_BSD_SOURCE) && !definedEx(_SVID_SOURCE) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE))

#endif
/* If _GNU_SOURCE was defined by the user, turn on all the other features.  */
#if definedEx(_GNU_SOURCE)




















#endif
/* If nothing (other than _GNU_SOURCE) is defined,
   define _BSD_SOURCE and _SVID_SOURCE.  */
#if (!definedEx(_POSIX_SOURCE) && !definedEx(_BSD_SOURCE) && !definedEx(_SVID_SOURCE) && !definedEx(__STRICT_ANSI__) && !definedEx(_ISOC99_SOURCE) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))


#endif
/* This is to enable the ISO C99 extension.  Also recognize the old macro
   which was used prior to the standard acceptance.  This macro will
   eventually go away and the features enabled by default once the ISO C99
   standard is widely adopted.  */



/* This is to enable the ISO C90 Amendment 1:1995 extension.  */



/* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.2
   (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
#if (!definedEx(_POSIX_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE))

#if (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)))

#endif

 
#if (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif

#endif
#if (defined(_POSIX_SOURCE) || (((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && ((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(_XOPEN_SOURCE) || (((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)))

#endif
#if (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (defined(_POSIX_C_SOURCE) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && ((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)))))

#endif
#if ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)))

#endif
#if ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)))

#endif
#if ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)))





#endif
#if ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)))



#endif
#if (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)))

#if (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))
















#endif
#if (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))
#if (definedEx(_XOPEN_SOURCE_EXTENDED) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)))

#endif
#endif
#endif
#if defined(_LARGEFILE_SOURCE)

#endif
#if (definedEx(_LARGEFILE64_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)))

#endif



#if (defined(_BSD_SOURCE) || defined(_SVID_SOURCE))

#endif
#if defined(_BSD_SOURCE)

#endif
#if defined(_SVID_SOURCE)

#endif
#if defined(_ATFILE_SOURCE)

#endif
#if definedEx(_GNU_SOURCE)

#endif
#if (definedEx(_REENTRANT) || definedEx(_THREAD_SAFE))

#endif






 
 

 

/* We do support the IEC 559 math functionality, real and complex.  */



/* wchar_t uses ISO 10646-1 (2nd ed., published 2000-09-15) / Unicode 3.1.  */


/* This macro indicates that the installed library is the GNU C Library.
   For historic reasons the value now is 6 and this will stay from now
   on.  The use of this variable is deprecated.  Use __GLIBC__ and
   __GLIBC_MINOR__ now (see below) when you want to test for a specific
   GNU C library version and use the values in <gnu/lib-names.h> to get
   the sonames of the shared libraries.  */



/* Major and minor version number of the GNU C library package.  Use
   these macros to test for features in specific releases.  */






/* Decide whether a compiler supports the long long datatypes.  */



/* This is here only because every header file already includes this one.  */
#if !definedEx(__ASSEMBLER__)
#if !definedEx(_SYS_CDEFS_H)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 1
/* Copyright (C) 1992-2001, 2002, 2004, 2005, 2006, 2007, 2009
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




/* We are almost always included from features.h. */



/* The GNU libc does not support any K&R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */



/* Some user header file might have defined this before.  */




/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */



 


 



 









/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */



/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */




/* This is not a typedef so `const __ptr_t' does the right thing.  */




/* C++ needs to know that types and declarations are C, not C++.  */



 


/* The standard library needs the functions from the ISO C90 standard
   in the std namespace.  At the same time we want to be safe for
   future changes and we include the ISO C99 code in the non-standard
   namespace __c99.  The C++ wrapper header take case of adding the
   definitions to the global namespace.  */







 /* For compatibility we do not add the declarations into any
   namespace.  They will end up in the global namespace which is what
   old code expects.  */







/* Support for bounded pointers.  */
#if !definedEx(__BOUNDED_POINTERS__)



#endif
/* Fortify support.  */









 



/* Support for flexible arrays.  */

/* GCC 2.97 supports C99 flexible array members.  */

 

 

 




/* __asm__ ("xyz") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */






 





/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

*/

/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */



/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */



 


/* gcc allows marking deprecated functions.  */


 

/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */


 

/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */



 

/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */


 

/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */






 

#if !definedEx(__wur)

#endif
/* Forces a function to be always inlined.  */


 

/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  */






 


 



 



/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */




/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */



/* __restrict is known in EGCS 1.2 and above. */



/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */
#if !definedEx(__GNUG__)

#endif
#if definedEx(__GNUG__)


 

 



#endif
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 367 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 2

#if (definedEx(__LONG_DOUBLE_MATH_OPTIONAL) && definedEx(__NO_LONG_DOUBLE_MATH))

















#endif
#if ((!definedEx(__LDBL_COMPAT) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || !definedEx(__LONG_DOUBLE_MATH_OPTIONAL) || !definedEx(__NO_LONG_DOUBLE_MATH) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(__REDIRECT) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))))










#endif

#line 363 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2
#endif
/* If we don't have __REDIRECT, prototypes will be missing if
   __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */




#endif
/* Decide whether we can define 'extern inline' functions in headers.  */



/* This is here only because every header file already includes this one.
   Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
   <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
   that will always return failure (and set errno to ENOSYS).  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 1
/* This file selects the right generated file of `__stub_FUNCTION' macros
   based on the architecture being compiled for.  */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 6 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2



 #line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs-64.h" 1
/* This file is automatically generated.
   It defines a symbol `__stub_FUNCTION' for each function
   in the C library which is a stub, meaning it will fail
   every time called, usually setting errno to ENOSYS.  */


 















#line 11 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2
 

#line 387 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2


#endif
#line 29 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2


/* Maximum length of any multibyte character in any locale.
   We define this value here since the gcc header does not define
   the correct value.  */



/* If we are not using GNU CC we have to define all the symbols ourself.
   Otherwise use gcc's definitions (see below).  */





























 



















 






 













 /* Get the compiler's limits.h, which defines almost all the ISO constants.

    We put this #include_next outside the double inclusion check because
    it should be possible to include this file more than once and still get
    the definitions from gcc's header.  */




/* The <limits.h> files in some gcc versions don't define LLONG_MIN,
   LLONG_MAX, and ULLONG_MAX.  Instead only the values gcc defined for
   ages are available.  */
#if defined(__USE_ISOC99)
#if !definedEx(LLONG_MIN)

#endif
#if !definedEx(LLONG_MAX)

#endif
#if !definedEx(ULLONG_MAX)

#endif
#endif
#if defined(__USE_POSIX)
/* POSIX adds things to <limits.h>.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/posix1_lim.h" 1
/* Copyright (C) 1991-1993,96,98,2000-2003,2004 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 *	POSIX Standard: 2.9.2 Minimum Values	Added to <limits.h>
 *
 *	Never include this file directly; use <limits.h> instead.
 */

#if !definedEx(_BITS_POSIX1_LIM_H)



/* These are the standard-mandated minimum values.  */

/* Minimum number of operations in one list I/O call.  */


/* Minimal number of outstanding asynchronous I/O operations.  */


/* Maximum length of arguments to `execve', including environment.  */


/* Maximum simultaneous processes per real user ID.  */
#if defined(__USE_XOPEN2K)

#endif
#if !defined(__USE_XOPEN2K)

#endif
/* Minimal number of timer expiration overruns.  */


/* Maximum length of a host name (not including the terminating null)
   as returned from the GETHOSTNAME function.  */


/* Maximum link count of a file.  */


/* Maximum length of login name.  */


/* Number of bytes in a terminal canonical input queue.  */


/* Number of bytes for which space will be
   available in a terminal input queue.  */


/* Maximum number of message queues open for a process.  */


/* Maximum number of supported message priorities.  */


/* Number of bytes in a filename.  */


/* Number of simultaneous supplementary group IDs per process.  */
#if defined(__USE_XOPEN2K)

#endif
#if !defined(__USE_XOPEN2K)

#endif
/* Number of files one process can have open at once.  */
#if defined(__USE_XOPEN2K)

#endif
#if !defined(__USE_XOPEN2K)

#endif
#if (!defined(__USE_XOPEN2K) || defined(__USE_GNU))
/* Number of descriptors that a process may examine with `pselect' or
   `select'.  */

#endif
/* Number of bytes in a pathname.  */


/* Number of bytes than can be written atomically to a pipe.  */


/* The number of repeated occurrences of a BRE permitted by the
   REGEXEC and REGCOMP functions when using the interval notation.  */


/* Minimal number of realtime signals reserved for the application.  */


/* Number of semaphores a process can have.  */


/* Maximal value of a semaphore.  */


/* Number of pending realtime signals.  */


/* Largest value of a `ssize_t'.  */


/* Number of streams a process can have open at once.  */


/* The number of bytes in a symbolic link.  */


/* The number of symbolic links that can be traversed in the
   resolution of a pathname in the absence of a loop.  */


/* Number of timer for a process.  */


/* Maximum number of characters in a tty name.  */


/* Maximum length of a timezone name (element of `tzname').  */


#if (!defined(__USE_XOPEN2K) || defined(__USE_GNU))
/* Maximum number of connections that can be queued on a socket.  */


/* Maximum number of bytes that can be buffered on a socket for send
   or receive.  */


/* Maximum number of elements in an `iovec' array.  */

#endif
/* Maximum clock resolution in nanoseconds.  */



/* Get the implementation-specific values for the above.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/local_lim.h" 1
/* Minimum guaranteed maximum values for system limits.  Linux version.
   Copyright (C) 1993-1998,2000,2002-2004,2008 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* The kernel header pollutes the namespace with the NR_OPEN symbol
   and defines LINK_MAX although filesystems have different maxima.  A
   similar thing is true for OPEN_MAX: the limit can be changed at
   runtime and therefore the macro must not be defined.  Remove this
   after including the header if necessary.  */
#if !definedEx(NR_OPEN)

#endif
#if !definedEx(LINK_MAX)

#endif
#if !definedEx(OPEN_MAX)

#endif
#if !definedEx(ARG_MAX)

#endif
/* The kernel sources contain a file with all the needed information.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/linux/limits.h" 1
#if !definedEx(_LINUX_LIMITS_H)


















#endif
#line 41 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/local_lim.h" 2

/* Have to remove NR_OPEN?  */
#if (definedEx(__undef_NR_OPEN) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(NR_OPEN) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(__USE_POSIX) && !definedEx(_BITS_POSIX1_LIM_H) && !definedEx(_GCC_LIMITS_H_)))


#endif
/* Have to remove LINK_MAX?  */
#if (definedEx(__undef_LINK_MAX) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LINK_MAX) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(__USE_POSIX) && !definedEx(_BITS_POSIX1_LIM_H) && !definedEx(_GCC_LIMITS_H_)))


#endif
/* Have to remove OPEN_MAX?  */
#if (definedEx(__undef_OPEN_MAX) || (!definedEx(OPEN_MAX) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(__USE_POSIX) && !definedEx(_BITS_POSIX1_LIM_H) && !definedEx(_GCC_LIMITS_H_)))


#endif
/* Have to remove ARG_MAX?  */
#if (definedEx(__undef_ARG_MAX) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(ARG_MAX) && defined(__USE_POSIX) && !definedEx(_BITS_POSIX1_LIM_H) && !definedEx(_GCC_LIMITS_H_)))


#endif
/* The number of data keys per process.  */

/* This is the value this implementation supports.  */


/* Controlling the iterations of destructors for thread-specific data.  */

/* Number of iterations this implementation does.  */


/* The number of threads per process.  */

/* We have no predefined limit on the number of threads.  */


/* Maximum amount by which a process can descrease its asynchronous I/O
   priority level.  */


/* Minimum size for a thread.  We are free to choose a reasonable value.  */


/* Maximum number of timer expiration overruns.  */


/* Maximum tty name length.  */


/* Maximum login name length.  This is arbitrary.  */


/* Maximum host name length.  */


/* Maximum message queue priority level.  */


/* Maximum value the semaphore can have.  */

#line 159 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/posix1_lim.h" 2


#if !definedEx(SSIZE_MAX)

#endif
/* This value is a guaranteed minimum maximum.
   The current maximum can be got from `sysconf'.  */

#if (!definedEx(NGROUPS_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX1_LIM_H) || definedEx(_LINUX_LIMITS_H) || !defined(__USE_POSIX) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#endif
#line 147 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2
#endif
#if defined(__USE_POSIX2)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/posix2_lim.h" 1
/* Copyright (C) 1991, 1996, 1999, 2000, 2001 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; include <limits.h> instead.
 */

#if !definedEx(_BITS_POSIX2_LIM_H)



/* The maximum `ibase' and `obase' values allowed by the `bc' utility.  */


/* The maximum number of elements allowed in an array by the `bc' utility.  */


/* The maximum `scale' value allowed by the `bc' utility.  */


/* The maximum length of a string constant accepted by the `bc' utility.  */


/* The maximum number of weights that can be assigned to an entry of
   the LC_COLLATE `order' keyword in the locale definition file.  */


/* The maximum number of expressions that can be nested
   within parentheses by the `expr' utility.  */


/* The maximum length, in bytes, of an input line.  */


/* The maximum number of repeated occurrences of a regular expression
   permitted when using the interval notation `\{M,N\}'.  */


/* The maximum number of bytes in a character class name.  We have no
   fixed limit, 2048 is a high number.  */



/* These values are implementation-specific,
   and may vary within the implementation.
   Their precise values can be obtained from sysconf.  */

#if !definedEx(BC_BASE_MAX)

#endif
#if !definedEx(BC_DIM_MAX)

#endif
#if !definedEx(BC_SCALE_MAX)

#endif
#if !definedEx(BC_STRING_MAX)

#endif
#if !definedEx(COLL_WEIGHTS_MAX)

#endif
#if !definedEx(EXPR_NEST_MAX)

#endif
#if !definedEx(LINE_MAX)

#endif
#if !definedEx(CHARCLASS_NAME_MAX)

#endif
/* This value is defined like this in regex.h.  */


#endif
#line 151 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2
#endif
#if defined(__USE_XOPEN)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/xopen_lim.h" 1
/* Copyright (C) 1996, 1997, 1999, 2001 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; use <limits.h> instead.
 */

/* Additional definitions from X/Open Portability Guide, Issue 4, Version 2
   System Interfaces and Headers, 4.16 <limits.h>

   Please note only the values which are not greater than the minimum
   stated in the standard document are listed.  The `sysconf' functions
   should be used to obtain the actual value.  */

#if !definedEx(_XOPEN_LIM_H)



#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/stdio_lim.h" 1
/* Copyright (C) 1994, 1997, 1998, 1999, 2009 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




#if definedEx(_STDIO_H)




#if defined(__USE_POSIX)

#if (!defined(__USE_XOPEN2K) || defined(__USE_GNU))

#endif
#endif
#endif
#if (definedEx(_STDIO_H) || definedEx(__need_FOPEN_MAX))


#endif
#if (!definedEx(IOV_MAX) && (definedEx(__need_IOV_MAX) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_XOPEN_LIM_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(__USE_XOPEN) && !definedEx(_GCC_LIMITS_H_))))

#endif
#line 36 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/xopen_lim.h" 2

/* We do not provide fixed values for

   ARG_MAX	Maximum length of argument to the `exec' function
		including environment data.

   ATEXIT_MAX	Maximum number of functions that may be registered
		with `atexit'.

   CHILD_MAX	Maximum number of simultaneous processes per real
		user ID.

   OPEN_MAX	Maximum number of files that one process can have open
		at anyone time.

   PAGESIZE
   PAGE_SIZE	Size of bytes of a page.

   PASS_MAX	Maximum number of significant bytes in a password.

   We only provide a fixed limit for

   IOV_MAX	Maximum number of `iovec' structures that one process has
		available for use with `readv' or writev'.

   if this is indeed fixed by the underlying system.
*/


/* Maximum number of `iovec' structures that one process has available
   for use with `readv' or writev'.  */



/* Maximum value of `digit' in calls to the `printf' and `scanf'
   functions.  We have no limit, so return a reasonable value.  */


/* Maximum number of bytes in a `LANG' name.  We have no limit.  */


/* Maximum message number.  We have no limit.  */


/* Maximum number of bytes in N-to-1 collation mapping.  We have no
   limit.  */


/* Maximum set number.  We have no limit.  */


/* Maximum number of bytes in a message.  We have no limit.  */


/* Default process priority.  */



/* Number of bits in a word of type `int'.  */
#if definedEx(INT_MAX)


 

 /* Safe assumption.  */



#endif
#if !definedEx(INT_MAX)


 

 



#endif


/* Number of bits in a word of type `long int'.  */
#if definedEx(LONG_MAX)


 /* Safe assumption.  */


#endif
#if !definedEx(LONG_MAX)


 /* Safe assumption.  */


#endif



 


#endif
#line 155 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2
#endif
#line 9 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/syslimits.h" 2

#line 13 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/limits.h" 2
#endif
#if !definedEx(_LIMITS_H___)


/* Number of bits in a `char'.  */



/* Maximum length of a multibyte character.  */
#if (!definedEx(MB_LEN_MAX) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)))

#endif
/* Minimum and maximum values a `signed char' can hold.  */





/* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */



 

/* Minimum and maximum values a `char' can hold.  */
#if definedEx(__CHAR_UNSIGNED__)



 



#endif
#if !definedEx(__CHAR_UNSIGNED__)




#endif
/* Minimum and maximum values a `signed short int' can hold.  */





/* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */



 

/* Minimum and maximum values a `signed int' can hold.  */





/* Maximum value an `unsigned int' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `signed long int' can hold.
   (Same as `int').  */





/* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */




/* Minimum and maximum values a `signed long long int' can hold.  */





/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */



#if ((defined(__USE_GNU) && (definedEx(__GNU_LIBRARY__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)))) || (!definedEx(__GNU_LIBRARY__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(__STRICT_ANSI__)))
/* Minimum and maximum values a `signed long long int' can hold.  */





/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */


#endif
#endif
/* This administrivia gets added to the end of limits.h
   if the system has its own version of limits.h.  */

#endif
#if definedEx(_GCC_LIMITS_H_)
#if (definedEx(_GCC_NEXT_LIMITS_H) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)))
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 1
/* Copyright (C) 1991, 1992, 1996, 1997, 1998, 1999, 2000, 2005
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 *	ISO C99 Standard: 7.10/5.2.4.2.1 Sizes of integer types	<limits.h>
 */

#if (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)))


#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 1
/* Copyright (C) 1991-1993,1995-2007,2009,2010 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#if (!definedEx(_FEATURES_H) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)))


/* These are defined by the user (or the compiler)
   to specify the desired environment:

   __STRICT_ANSI__	ISO Standard C.
   _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
   _POSIX_SOURCE	IEEE Std 1003.1.
   _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
			if >=199309L, add IEEE Std 1003.1b-1993;
			if >=199506L, add IEEE Std 1003.1c-1995;
			if >=200112L, all of IEEE 1003.1-2004
			if >=200809L, all of IEEE 1003.1-2008
   _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
			Single Unix conformance is wanted, to 600 for the
			sixth revision, to 700 for the seventh revision.
   _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
   _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
   _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
   _FILE_OFFSET_BITS=N	Select default filesystem interface.
   _BSD_SOURCE		ISO C, POSIX, and 4.3BSD things.
   _SVID_SOURCE		ISO C, POSIX, and SVID things.
   _ATFILE_SOURCE	Additional *at interfaces.
   _GNU_SOURCE		All of the above, plus GNU extensions.
   _REENTRANT		Select additionally reentrant object.
   _THREAD_SAFE		Same as _REENTRANT, often used by other systems.
   _FORTIFY_SOURCE	If set to numeric value > 0 additional security
			measures are defined, according to level.

   The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
   If none of these are defined, the default is to have _SVID_SOURCE,
   _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
   200112L.  If more than one of these are defined, they accumulate.
   For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
   together give you ISO C, 1003.1, and 1003.2, but nothing else.

   These are defined by this file and are used by the
   header files to decide what to declare or define:

   __USE_ISOC99		Define ISO C99 things.
   __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
   __USE_POSIX		Define IEEE Std 1003.1 things.
   __USE_POSIX2		Define IEEE Std 1003.2 things.
   __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
   __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
   __USE_XOPEN		Define XPG things.
   __USE_XOPEN_EXTENDED	Define X/Open Unix things.
   __USE_UNIX98		Define Single Unix V2 things.
   __USE_XOPEN2K        Define XPG6 things.
   __USE_XOPEN2KXSI     Define XPG6 XSI things.
   __USE_XOPEN2K8XSI    Define XPG7 XSI things.
   __USE_LARGEFILE	Define correct standard I/O things.
   __USE_LARGEFILE64	Define LFS things with separate names.
   __USE_FILE_OFFSET64	Define 64bit interface as default.
   __USE_BSD		Define 4.3BSD things.
   __USE_SVID		Define SVID things.
   __USE_MISC		Define things common to BSD and System V Unix.
   __USE_ATFILE		Define *at interfaces and AT_* constants for them.
   __USE_GNU		Define GNU extensions.
   __USE_REENTRANT	Define reentrant/thread-safe *_r functions.
   __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
   __FAVOR_BSD		Favor 4.3BSD things in cases of conflict.

   The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   only for compatibility.  All new code should use the other symbols
   to test for features.

   All macros listed above as possibly being defined by this file are
   explicitly undefined if they are not explicitly defined.
   Feature-test macros that are not defined by the user or compiler
   but are implied by the other feature-test macros defined (or by the
   lack of any definitions) are defined by the file.  */


/* Undefine everything, so we get a clean slate.  */


























/* Suppress kernel-name space pollution unless user expressedly asks
   for it.  */
#if !definedEx(_LOOSE_KERNEL_NAMES)

#endif
/* Always use ISO C things.  */


/* Convenience macros to test the versions of glibc and gcc.
   Use them like this:
   #if __GNUC_PREREQ (2,8)
   ... code requiring gcc 2.8 or later ...
   #endif
   Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   were not defined then.  */



 

/* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
#if (defined(_BSD_SOURCE) && !defined(_POSIX_SOURCE) && !definedEx(_GNU_SOURCE) && !defined(_SVID_SOURCE) && !definedEx(_XOPEN_SOURCE) && !defined(_POSIX_C_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
/* If _GNU_SOURCE was defined by the user, turn on all the other features.  */
#if definedEx(_GNU_SOURCE)




















#endif
/* If nothing (other than _GNU_SOURCE) is defined,
   define _BSD_SOURCE and _SVID_SOURCE.  */
#if (!defined(_ISOC99_SOURCE) && !defined(_BSD_SOURCE) && !defined(_XOPEN_SOURCE) && !definedEx(__STRICT_ANSI__) && !defined(_POSIX_SOURCE) && !defined(_SVID_SOURCE) && !defined(_POSIX_C_SOURCE))


#endif
/* This is to enable the ISO C99 extension.  Also recognize the old macro
   which was used prior to the standard acceptance.  This macro will
   eventually go away and the features enabled by default once the ISO C99
   standard is widely adopted.  */



/* This is to enable the ISO C90 Amendment 1:1995 extension.  */



/* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.2
   (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
#if (!defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE))

#if defined(_XOPEN_SOURCE)

#endif

 
#if !defined(_XOPEN_SOURCE)

#endif

#endif
#if (defined(_POSIX_SOURCE) || ((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || ((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || defined(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && ((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))) || defined(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))

#endif
#if (defined(_XOPEN_SOURCE) || (defined(_POSIX_C_SOURCE) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || ((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || defined(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && ((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))))))

#endif
#if (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))

#endif
#if (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))

#endif
#if (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))





#endif
#if (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)))



#endif
#if defined(_XOPEN_SOURCE)

#if ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)))
















#endif
#if ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))
#if defined(_XOPEN_SOURCE_EXTENDED)

#endif
#endif
#endif
#if defined(_LARGEFILE_SOURCE)

#endif
#if defined(_LARGEFILE64_SOURCE)

#endif



#if (defined(_BSD_SOURCE) || defined(_SVID_SOURCE))

#endif
#if defined(_BSD_SOURCE)

#endif
#if defined(_SVID_SOURCE)

#endif
#if defined(_ATFILE_SOURCE)

#endif
#if definedEx(_GNU_SOURCE)

#endif
#if (definedEx(_REENTRANT) || definedEx(_THREAD_SAFE))

#endif






 
 

 

/* We do support the IEC 559 math functionality, real and complex.  */



/* wchar_t uses ISO 10646-1 (2nd ed., published 2000-09-15) / Unicode 3.1.  */


/* This macro indicates that the installed library is the GNU C Library.
   For historic reasons the value now is 6 and this will stay from now
   on.  The use of this variable is deprecated.  Use __GLIBC__ and
   __GLIBC_MINOR__ now (see below) when you want to test for a specific
   GNU C library version and use the values in <gnu/lib-names.h> to get
   the sonames of the shared libraries.  */



/* Major and minor version number of the GNU C library package.  Use
   these macros to test for features in specific releases.  */






/* Decide whether a compiler supports the long long datatypes.  */



/* This is here only because every header file already includes this one.  */
#if !definedEx(__ASSEMBLER__)
#if (!definedEx(_SYS_CDEFS_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 1
/* Copyright (C) 1992-2001, 2002, 2004, 2005, 2006, 2007, 2009
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




/* We are almost always included from features.h. */



/* The GNU libc does not support any K&R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */



/* Some user header file might have defined this before.  */




/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */



 


 



 









/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */



/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */




/* This is not a typedef so `const __ptr_t' does the right thing.  */




/* C++ needs to know that types and declarations are C, not C++.  */



 


/* The standard library needs the functions from the ISO C90 standard
   in the std namespace.  At the same time we want to be safe for
   future changes and we include the ISO C99 code in the non-standard
   namespace __c99.  The C++ wrapper header take case of adding the
   definitions to the global namespace.  */







 /* For compatibility we do not add the declarations into any
   namespace.  They will end up in the global namespace which is what
   old code expects.  */







/* Support for bounded pointers.  */
#if !definedEx(__BOUNDED_POINTERS__)



#endif
/* Fortify support.  */









 



/* Support for flexible arrays.  */

/* GCC 2.97 supports C99 flexible array members.  */

 

 

 




/* __asm__ ("xyz") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */






 





/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

*/

/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */



/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */



 


/* gcc allows marking deprecated functions.  */


 

/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */


 

/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */



 

/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */


 

/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */






 

#if (!definedEx(__wur) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
/* Forces a function to be always inlined.  */


 

/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  */






 


 



 



/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */




/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */



/* __restrict is known in EGCS 1.2 and above. */



/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */
#if !definedEx(__GNUG__)

#endif
#if definedEx(__GNUG__)


 

 



#endif
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 367 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 2

#if (definedEx(__LONG_DOUBLE_MATH_OPTIONAL) && definedEx(__NO_LONG_DOUBLE_MATH))

















#endif
#if (!defined(__LDBL_COMPAT) || !defined(__REDIRECT))










#endif

#line 363 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2
#endif
/* If we don't have __REDIRECT, prototypes will be missing if
   __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */




#endif
/* Decide whether we can define 'extern inline' functions in headers.  */



/* This is here only because every header file already includes this one.
   Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
   <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
   that will always return failure (and set errno to ENOSYS).  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 1
/* This file selects the right generated file of `__stub_FUNCTION' macros
   based on the architecture being compiled for.  */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 6 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2



 #line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs-64.h" 1
/* This file is automatically generated.
   It defines a symbol `__stub_FUNCTION' for each function
   in the C library which is a stub, meaning it will fail
   every time called, usually setting errno to ENOSYS.  */


 















#line 11 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2
 

#line 387 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2


#endif
#line 29 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2


/* Maximum length of any multibyte character in any locale.
   We define this value here since the gcc header does not define
   the correct value.  */



/* If we are not using GNU CC we have to define all the symbols ourself.
   Otherwise use gcc's definitions (see below).  */





























 



















 






 












#endif
 /* Get the compiler's limits.h, which defines almost all the ISO constants.

    We put this #include_next outside the double inclusion check because
    it should be possible to include this file more than once and still get
    the definitions from gcc's header.  */




/* The <limits.h> files in some gcc versions don't define LLONG_MIN,
   LLONG_MAX, and ULLONG_MAX.  Instead only the values gcc defined for
   ages are available.  */
#if defined(__USE_ISOC99)
#if (!definedEx(LLONG_MIN) && (definedEx(LIBBB_H) || !defined(__USE_ISOC99) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIMITS_H___)))

#endif
#if (!definedEx(LLONG_MAX) && (definedEx(LIBBB_H) || !defined(__USE_ISOC99) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIMITS_H___)))

#endif
#if (!definedEx(ULLONG_MAX) && (definedEx(LIBBB_H) || !defined(__USE_ISOC99) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIMITS_H___)))

#endif
#endif
#if defined(__USE_POSIX)
/* POSIX adds things to <limits.h>.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/posix1_lim.h" 1
/* Copyright (C) 1991-1993,96,98,2000-2003,2004 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 *	POSIX Standard: 2.9.2 Minimum Values	Added to <limits.h>
 *
 *	Never include this file directly; use <limits.h> instead.
 */

#if (!definedEx(_BITS_POSIX1_LIM_H) && (definedEx(LIBBB_H) || !defined(__USE_POSIX) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))



/* These are the standard-mandated minimum values.  */

/* Minimum number of operations in one list I/O call.  */


/* Minimal number of outstanding asynchronous I/O operations.  */


/* Maximum length of arguments to `execve', including environment.  */


/* Maximum simultaneous processes per real user ID.  */
#if defined(__USE_XOPEN2K)

#endif
#if !defined(__USE_XOPEN2K)

#endif
/* Minimal number of timer expiration overruns.  */


/* Maximum length of a host name (not including the terminating null)
   as returned from the GETHOSTNAME function.  */


/* Maximum link count of a file.  */


/* Maximum length of login name.  */


/* Number of bytes in a terminal canonical input queue.  */


/* Number of bytes for which space will be
   available in a terminal input queue.  */


/* Maximum number of message queues open for a process.  */


/* Maximum number of supported message priorities.  */


/* Number of bytes in a filename.  */


/* Number of simultaneous supplementary group IDs per process.  */
#if defined(__USE_XOPEN2K)

#endif
#if !defined(__USE_XOPEN2K)

#endif
/* Number of files one process can have open at once.  */
#if defined(__USE_XOPEN2K)

#endif
#if !defined(__USE_XOPEN2K)

#endif
#if (!defined(__USE_XOPEN2K) || defined(__USE_GNU))
/* Number of descriptors that a process may examine with `pselect' or
   `select'.  */

#endif
/* Number of bytes in a pathname.  */


/* Number of bytes than can be written atomically to a pipe.  */


/* The number of repeated occurrences of a BRE permitted by the
   REGEXEC and REGCOMP functions when using the interval notation.  */


/* Minimal number of realtime signals reserved for the application.  */


/* Number of semaphores a process can have.  */


/* Maximal value of a semaphore.  */


/* Number of pending realtime signals.  */


/* Largest value of a `ssize_t'.  */


/* Number of streams a process can have open at once.  */


/* The number of bytes in a symbolic link.  */


/* The number of symbolic links that can be traversed in the
   resolution of a pathname in the absence of a loop.  */


/* Number of timer for a process.  */


/* Maximum number of characters in a tty name.  */


/* Maximum length of a timezone name (element of `tzname').  */


#if (!defined(__USE_XOPEN2K) || defined(__USE_GNU))
/* Maximum number of connections that can be queued on a socket.  */


/* Maximum number of bytes that can be buffered on a socket for send
   or receive.  */


/* Maximum number of elements in an `iovec' array.  */

#endif
/* Maximum clock resolution in nanoseconds.  */



/* Get the implementation-specific values for the above.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/local_lim.h" 1
/* Minimum guaranteed maximum values for system limits.  Linux version.
   Copyright (C) 1993-1998,2000,2002-2004,2008 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* The kernel header pollutes the namespace with the NR_OPEN symbol
   and defines LINK_MAX although filesystems have different maxima.  A
   similar thing is true for OPEN_MAX: the limit can be changed at
   runtime and therefore the macro must not be defined.  Remove this
   after including the header if necessary.  */
#if !defined(NR_OPEN)

#endif
#if !defined(LINK_MAX)

#endif
#if !defined(OPEN_MAX)

#endif
#if !defined(ARG_MAX)

#endif
/* The kernel sources contain a file with all the needed information.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/linux/limits.h" 1
#if (!definedEx(_LINUX_LIMITS_H) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX1_LIM_H) || !defined(__USE_POSIX) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))


















#endif
#line 41 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/local_lim.h" 2

/* Have to remove NR_OPEN?  */
#if defined(__undef_NR_OPEN)


#endif
/* Have to remove LINK_MAX?  */
#if defined(__undef_LINK_MAX)


#endif
/* Have to remove OPEN_MAX?  */
#if defined(__undef_OPEN_MAX)


#endif
/* Have to remove ARG_MAX?  */
#if defined(__undef_ARG_MAX)


#endif
/* The number of data keys per process.  */

/* This is the value this implementation supports.  */


/* Controlling the iterations of destructors for thread-specific data.  */

/* Number of iterations this implementation does.  */


/* The number of threads per process.  */

/* We have no predefined limit on the number of threads.  */


/* Maximum amount by which a process can descrease its asynchronous I/O
   priority level.  */


/* Minimum size for a thread.  We are free to choose a reasonable value.  */


/* Maximum number of timer expiration overruns.  */


/* Maximum tty name length.  */


/* Maximum login name length.  This is arbitrary.  */


/* Maximum host name length.  */


/* Maximum message queue priority level.  */


/* Maximum value the semaphore can have.  */

#line 159 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/posix1_lim.h" 2


#if (!definedEx(SSIZE_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX1_LIM_H) || !defined(__USE_POSIX) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
/* This value is a guaranteed minimum maximum.
   The current maximum can be got from `sysconf'.  */

#if !defined(NGROUPS_MAX)

#endif
#endif
#line 147 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2
#endif
#if defined(__USE_POSIX2)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/posix2_lim.h" 1
/* Copyright (C) 1991, 1996, 1999, 2000, 2001 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; include <limits.h> instead.
 */

#if (!definedEx(_BITS_POSIX2_LIM_H) && (definedEx(LIBBB_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))



/* The maximum `ibase' and `obase' values allowed by the `bc' utility.  */


/* The maximum number of elements allowed in an array by the `bc' utility.  */


/* The maximum `scale' value allowed by the `bc' utility.  */


/* The maximum length of a string constant accepted by the `bc' utility.  */


/* The maximum number of weights that can be assigned to an entry of
   the LC_COLLATE `order' keyword in the locale definition file.  */


/* The maximum number of expressions that can be nested
   within parentheses by the `expr' utility.  */


/* The maximum length, in bytes, of an input line.  */


/* The maximum number of repeated occurrences of a regular expression
   permitted when using the interval notation `\{M,N\}'.  */


/* The maximum number of bytes in a character class name.  We have no
   fixed limit, 2048 is a high number.  */



/* These values are implementation-specific,
   and may vary within the implementation.
   Their precise values can be obtained from sysconf.  */

#if (!definedEx(BC_BASE_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(BC_DIM_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(BC_SCALE_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(BC_STRING_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(COLL_WEIGHTS_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(EXPR_NEST_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(LINE_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
#if (!definedEx(CHARCLASS_NAME_MAX) && (definedEx(LIBBB_H) || definedEx(_BITS_POSIX2_LIM_H) || !defined(__USE_POSIX2) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))

#endif
/* This value is defined like this in regex.h.  */


#endif
#line 151 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2
#endif
#if defined(__USE_XOPEN)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/xopen_lim.h" 1
/* Copyright (C) 1996, 1997, 1999, 2001 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; use <limits.h> instead.
 */

/* Additional definitions from X/Open Portability Guide, Issue 4, Version 2
   System Interfaces and Headers, 4.16 <limits.h>

   Please note only the values which are not greater than the minimum
   stated in the standard document are listed.  The `sysconf' functions
   should be used to obtain the actual value.  */

#if (!definedEx(_XOPEN_LIM_H) && (definedEx(LIBBB_H) || !defined(__USE_XOPEN) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))



#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/stdio_lim.h" 1
/* Copyright (C) 1994, 1997, 1998, 1999, 2009 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




#if definedEx(_STDIO_H)




#if defined(__USE_POSIX)

#if (!defined(__USE_XOPEN2K) || defined(__USE_GNU))

#endif
#endif
#endif
#if (definedEx(_STDIO_H) || definedEx(__need_FOPEN_MAX))


#endif
#if (defined(__need_IOV_MAX) && !defined(IOV_MAX))

#endif
#line 36 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/xopen_lim.h" 2

/* We do not provide fixed values for

   ARG_MAX	Maximum length of argument to the `exec' function
		including environment data.

   ATEXIT_MAX	Maximum number of functions that may be registered
		with `atexit'.

   CHILD_MAX	Maximum number of simultaneous processes per real
		user ID.

   OPEN_MAX	Maximum number of files that one process can have open
		at anyone time.

   PAGESIZE
   PAGE_SIZE	Size of bytes of a page.

   PASS_MAX	Maximum number of significant bytes in a password.

   We only provide a fixed limit for

   IOV_MAX	Maximum number of `iovec' structures that one process has
		available for use with `readv' or writev'.

   if this is indeed fixed by the underlying system.
*/


/* Maximum number of `iovec' structures that one process has available
   for use with `readv' or writev'.  */



/* Maximum value of `digit' in calls to the `printf' and `scanf'
   functions.  We have no limit, so return a reasonable value.  */


/* Maximum number of bytes in a `LANG' name.  We have no limit.  */


/* Maximum message number.  We have no limit.  */


/* Maximum number of bytes in N-to-1 collation mapping.  We have no
   limit.  */


/* Maximum set number.  We have no limit.  */


/* Maximum number of bytes in a message.  We have no limit.  */


/* Default process priority.  */



/* Number of bits in a word of type `int'.  */
#if (definedEx(INT_MAX) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIMITS_H___)))


 

 /* Safe assumption.  */



#endif
#if (!definedEx(INT_MAX) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIMITS_H___)))


 

 



#endif


/* Number of bits in a word of type `long int'.  */
#if (definedEx(LONG_MAX) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIMITS_H___)))


 /* Safe assumption.  */


#endif
#if (!definedEx(LONG_MAX) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIMITS_H___)))


 /* Safe assumption.  */


#endif



 


#endif
#line 155 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 2
#endif
#line 124 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/limits.h" 2
#endif
#endif
#line 155 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/platform.h" 2
#if definedEx(__digital__)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sex.h" 1
#line 157 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/platform.h" 2
#endif
#if (!definedEx(__digital__) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)))
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/resource.h" 1
/* Copyright (C) 1992,94,1996-2000,2002,2004 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#if !definedEx(_SYS_RESOURCE_H)


#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 1
/* Copyright (C) 1991-1993,1995-2007,2009,2010 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#if !defined(_FEATURES_H)


/* These are defined by the user (or the compiler)
   to specify the desired environment:

   __STRICT_ANSI__	ISO Standard C.
   _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
   _POSIX_SOURCE	IEEE Std 1003.1.
   _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
			if >=199309L, add IEEE Std 1003.1b-1993;
			if >=199506L, add IEEE Std 1003.1c-1995;
			if >=200112L, all of IEEE 1003.1-2004
			if >=200809L, all of IEEE 1003.1-2008
   _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
			Single Unix conformance is wanted, to 600 for the
			sixth revision, to 700 for the seventh revision.
   _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
   _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
   _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
   _FILE_OFFSET_BITS=N	Select default filesystem interface.
   _BSD_SOURCE		ISO C, POSIX, and 4.3BSD things.
   _SVID_SOURCE		ISO C, POSIX, and SVID things.
   _ATFILE_SOURCE	Additional *at interfaces.
   _GNU_SOURCE		All of the above, plus GNU extensions.
   _REENTRANT		Select additionally reentrant object.
   _THREAD_SAFE		Same as _REENTRANT, often used by other systems.
   _FORTIFY_SOURCE	If set to numeric value > 0 additional security
			measures are defined, according to level.

   The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
   If none of these are defined, the default is to have _SVID_SOURCE,
   _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
   200112L.  If more than one of these are defined, they accumulate.
   For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
   together give you ISO C, 1003.1, and 1003.2, but nothing else.

   These are defined by this file and are used by the
   header files to decide what to declare or define:

   __USE_ISOC99		Define ISO C99 things.
   __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
   __USE_POSIX		Define IEEE Std 1003.1 things.
   __USE_POSIX2		Define IEEE Std 1003.2 things.
   __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
   __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
   __USE_XOPEN		Define XPG things.
   __USE_XOPEN_EXTENDED	Define X/Open Unix things.
   __USE_UNIX98		Define Single Unix V2 things.
   __USE_XOPEN2K        Define XPG6 things.
   __USE_XOPEN2KXSI     Define XPG6 XSI things.
   __USE_XOPEN2K8XSI    Define XPG7 XSI things.
   __USE_LARGEFILE	Define correct standard I/O things.
   __USE_LARGEFILE64	Define LFS things with separate names.
   __USE_FILE_OFFSET64	Define 64bit interface as default.
   __USE_BSD		Define 4.3BSD things.
   __USE_SVID		Define SVID things.
   __USE_MISC		Define things common to BSD and System V Unix.
   __USE_ATFILE		Define *at interfaces and AT_* constants for them.
   __USE_GNU		Define GNU extensions.
   __USE_REENTRANT	Define reentrant/thread-safe *_r functions.
   __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
   __FAVOR_BSD		Favor 4.3BSD things in cases of conflict.

   The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   only for compatibility.  All new code should use the other symbols
   to test for features.

   All macros listed above as possibly being defined by this file are
   explicitly undefined if they are not explicitly defined.
   Feature-test macros that are not defined by the user or compiler
   but are implied by the other feature-test macros defined (or by the
   lack of any definitions) are defined by the file.  */


/* Undefine everything, so we get a clean slate.  */


























/* Suppress kernel-name space pollution unless user expressedly asks
   for it.  */
#if !definedEx(_LOOSE_KERNEL_NAMES)

#endif
/* Always use ISO C things.  */


/* Convenience macros to test the versions of glibc and gcc.
   Use them like this:
   #if __GNUC_PREREQ (2,8)
   ... code requiring gcc 2.8 or later ...
   #endif
   Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   were not defined then.  */



 

/* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
#if (!defined(_POSIX_SOURCE) && !definedEx(_GNU_SOURCE) && defined(_BSD_SOURCE) && !defined(_XOPEN_SOURCE) && !defined(_POSIX_C_SOURCE) && !defined(_SVID_SOURCE))

#endif
/* If _GNU_SOURCE was defined by the user, turn on all the other features.  */
#if definedEx(_GNU_SOURCE)




















#endif
/* If nothing (other than _GNU_SOURCE) is defined,
   define _BSD_SOURCE and _SVID_SOURCE.  */
#if (!defined(_XOPEN_SOURCE) && !defined(_ISOC99_SOURCE) && !defined(_POSIX_SOURCE) && !definedEx(__STRICT_ANSI__) && !defined(_BSD_SOURCE) && !defined(_SVID_SOURCE) && !defined(_POSIX_C_SOURCE))


#endif
/* This is to enable the ISO C99 extension.  Also recognize the old macro
   which was used prior to the standard acceptance.  This macro will
   eventually go away and the features enabled by default once the ISO C99
   standard is widely adopted.  */



/* This is to enable the ISO C90 Amendment 1:1995 extension.  */



/* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.2
   (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
#if (!defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE))

#if defined(_XOPEN_SOURCE)

#endif

 
#if !defined(_XOPEN_SOURCE)

#endif

#endif
#if (defined(_POSIX_SOURCE) || defined(_XOPEN_SOURCE) || ((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || !defined(_XOPEN_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))) || (!definedEx(_SYS_RESOURCE_H) && !defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)) || ((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || defined(_XOPEN_SOURCE) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_SYS_RESOURCE_H) && defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)) || ((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || defined(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || defined(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && ((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_))) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))) || (!definedEx(_SYS_RESOURCE_H) && defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)))))

#endif
#if (defined(_XOPEN_SOURCE) || (defined(_POSIX_C_SOURCE) && (((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || !defined(_XOPEN_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))) || (!definedEx(_SYS_RESOURCE_H) && !defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)) || ((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || defined(_XOPEN_SOURCE) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_SYS_RESOURCE_H) && defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)) || ((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || defined(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)))) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || defined(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && ((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_XOPEN_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(_XOPEN_SOURCE) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && defined(_XOPEN_SOURCE) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_))) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))) || (!definedEx(_SYS_RESOURCE_H) && defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)))))))

#endif
#if (((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || !defined(_XOPEN_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))) || (!definedEx(_SYS_RESOURCE_H) && !defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)))

#endif
#if (((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || !defined(_XOPEN_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))) || (!definedEx(_SYS_RESOURCE_H) && !defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)))

#endif
#if (((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || !defined(_XOPEN_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))) || (!definedEx(_SYS_RESOURCE_H) && !defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)))





#endif
#if (((defined(_POSIX_SOURCE) || defined(_FEATURES_H) || definedEx(LIBBB_H) || !defined(_XOPEN_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(__digital__) || defined(_POSIX_C_SOURCE) || definedEx(BB_PLATFORM_H)) && (((defined(_POSIX_SOURCE) || definedEx(LIBBB_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !defined(_XOPEN_SOURCE) || !definedEx(_GCC_NEXT_LIMITS_H) || ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && definedEx(__STRICT_ANSI__)) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || defined(_POSIX_C_SOURCE) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && ((((definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || definedEx(LIBBB_H) || definedEx(_POSIX_SOURCE) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H))) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(_POSIX_SOURCE) && (!definedEx(__STRICT_ANSI__) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_))) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_XOPEN_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)))) || (!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !defined(_XOPEN_SOURCE) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !defined(_POSIX_SOURCE) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE) && !definedEx(_FEATURES_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))) || (!definedEx(_SYS_RESOURCE_H) && !defined(_XOPEN_SOURCE) && !definedEx(__digital__) && !defined(_POSIX_SOURCE) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)) || !definedEx(__STRICT_ANSI__)) && !defined(_POSIX_C_SOURCE)))



#endif
#if defined(_XOPEN_SOURCE)

#if ((!definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && definedEx(_GNU_SOURCE)))
















#endif
#if ((definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(LIBBB_H) || !definedEx(_GNU_SOURCE) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
#if defined(_XOPEN_SOURCE_EXTENDED)

#endif
#endif
#endif
#if defined(_LARGEFILE_SOURCE)

#endif
#if defined(_LARGEFILE64_SOURCE)

#endif



#if (defined(_BSD_SOURCE) || defined(_SVID_SOURCE))

#endif
#if defined(_BSD_SOURCE)

#endif
#if defined(_SVID_SOURCE)

#endif
#if defined(_ATFILE_SOURCE)

#endif
#if definedEx(_GNU_SOURCE)

#endif
#if (definedEx(_REENTRANT) || definedEx(_THREAD_SAFE))

#endif






 
 

 

/* We do support the IEC 559 math functionality, real and complex.  */



/* wchar_t uses ISO 10646-1 (2nd ed., published 2000-09-15) / Unicode 3.1.  */


/* This macro indicates that the installed library is the GNU C Library.
   For historic reasons the value now is 6 and this will stay from now
   on.  The use of this variable is deprecated.  Use __GLIBC__ and
   __GLIBC_MINOR__ now (see below) when you want to test for a specific
   GNU C library version and use the values in <gnu/lib-names.h> to get
   the sonames of the shared libraries.  */



/* Major and minor version number of the GNU C library package.  Use
   these macros to test for features in specific releases.  */






/* Decide whether a compiler supports the long long datatypes.  */



/* This is here only because every header file already includes this one.  */
#if !definedEx(__ASSEMBLER__)
#if !defined(_SYS_CDEFS_H)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 1
/* Copyright (C) 1992-2001, 2002, 2004, 2005, 2006, 2007, 2009
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




/* We are almost always included from features.h. */



/* The GNU libc does not support any K&R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */



/* Some user header file might have defined this before.  */




/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */



 


 



 









/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */



/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */




/* This is not a typedef so `const __ptr_t' does the right thing.  */




/* C++ needs to know that types and declarations are C, not C++.  */



 


/* The standard library needs the functions from the ISO C90 standard
   in the std namespace.  At the same time we want to be safe for
   future changes and we include the ISO C99 code in the non-standard
   namespace __c99.  The C++ wrapper header take case of adding the
   definitions to the global namespace.  */







 /* For compatibility we do not add the declarations into any
   namespace.  They will end up in the global namespace which is what
   old code expects.  */







/* Support for bounded pointers.  */
#if !definedEx(__BOUNDED_POINTERS__)



#endif
/* Fortify support.  */









 



/* Support for flexible arrays.  */

/* GCC 2.97 supports C99 flexible array members.  */

 

 

 




/* __asm__ ("xyz") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */






 





/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

*/

/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */



/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */



 


/* gcc allows marking deprecated functions.  */


 

/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */


 

/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */



 

/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */


 

/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */






 

#if !defined(__wur)

#endif
/* Forces a function to be always inlined.  */


 

/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  */






 


 



 



/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */




/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */



/* __restrict is known in EGCS 1.2 and above. */



/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */
#if !definedEx(__GNUG__)

#endif
#if definedEx(__GNUG__)


 

 



#endif
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 367 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 2

#if (definedEx(__LONG_DOUBLE_MATH_OPTIONAL) && definedEx(__NO_LONG_DOUBLE_MATH))

















#endif
#if (!defined(__LDBL_COMPAT) || !defined(__REDIRECT))










#endif

#line 363 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2
#endif
/* If we don't have __REDIRECT, prototypes will be missing if
   __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */




#endif
/* Decide whether we can define 'extern inline' functions in headers.  */



/* This is here only because every header file already includes this one.
   Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
   <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
   that will always return failure (and set errno to ENOSYS).  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 1
/* This file selects the right generated file of `__stub_FUNCTION' macros
   based on the architecture being compiled for.  */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 6 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2



 #line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs-64.h" 1
/* This file is automatically generated.
   It defines a symbol `__stub_FUNCTION' for each function
   in the C library which is a stub, meaning it will fail
   every time called, usually setting errno to ENOSYS.  */


 















#line 11 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2
 

#line 387 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2


#endif
#line 24 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/resource.h" 2

/* Get the system-dependent definitions of structures and bit values.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/resource.h" 1
/* Bit values & structures for resource limits.  Linux version.
   Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2004, 2005, 2008, 2009
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/types.h" 1
/* bits/types.h -- definitions of __*_t types underlying *_t types.
   Copyright (C) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; use <sys/types.h> instead.
 */

#if !definedEx(_BITS_TYPES_H)


#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 1
/* Copyright (C) 1991-1993,1995-2007,2009,2010 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */


























































































































 



















































 
 
 














































 





































 
 

 





















































#line 29 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/types.h" 2
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 30 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/types.h" 2

/* Convenience types.  */
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;

/* Fixed-size types, underlying types depend on word size and compiler.  */
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
 


/* quad_t is also 64 bits.  */

typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
 

 

  



  


/* The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
   macros for each of the OS types we define below.  The definitions
   of those macros must use the following macros for underlying types.
   We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned
   variants of each of the following integer types on this machine.

	16		-- "natural" 16-bit type (always short)
	32		-- "natural" 32-bit type (always int)
	64		-- "natural" 64-bit type (long or long long)
	LONG32		-- 32-bit type, traditionally long
	QUAD		-- 64-bit type, always long long
	WORD		-- natural type of __WORDSIZE bits (int or long)
	LONGWORD	-- type of __WORDSIZE bits, traditionally long

   We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
   conventional uses of `long' or `long long' type modifiers match the
   types we define, even when a less-adorned type would be the same size.
   This matters for (somewhat) portably writing printf/scanf formats for
   these types, where using the appropriate l or ll format modifiers can
   make the typedefs and the formats match up across all GNU platforms.  If
   we used `long' when it's 64 bits where `long long' is expected, then the
   compiler would warn about the formats not matching the argument types,
   and the programmer changing them to shut up the compiler would break the
   program's portability.

   Here we assume what is presently the case in all the GCC configurations
   we support: long long is always 64 bits, long is always word/address size,
   and int is always 32 bits.  */



















 







/* No need to mark the typedef with __extension__.   */

 

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/typesizes.h" 1
/* bits/typesizes.h -- underlying types for *_t.  Generic version.
   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




#if !definedEx(_BITS_TYPESIZES_H)


/* See <bits/types.h> for the meaning of these macros.  This file exists so
   that <bits/types.h> need not vary across different GNU platforms.  */

































/* Number of descriptors that can fit in an `fd_set'.  */



#endif
#line 133 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/types.h" 2


typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__DEV_T_TYPE
#endif
 __dev_t;	/* Type of device numbers.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__UID_T_TYPE
#endif
 __uid_t;	/* Type of user identifications.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__GID_T_TYPE
#endif
 __gid_t;	/* Type of group identifications.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__INO_T_TYPE
#endif
 __ino_t;	/* Type of file serial numbers.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__INO64_T_TYPE
#endif
 __ino64_t;	/* Type of file serial numbers (LFS).*/
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__MODE_T_TYPE
#endif
 __mode_t;	/* Type of file attribute bitmasks.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__NLINK_T_TYPE
#endif
 __nlink_t;	/* Type of file link counts.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__OFF_T_TYPE
#endif
 __off_t;	/* Type of file sizes and offsets.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__OFF64_T_TYPE
#endif
 __off64_t;	/* Type of file sizes and offsets (LFS).  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__PID_T_TYPE
#endif
 __pid_t;	/* Type of process identifications.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
struct { int __val[2]; }
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__FSID_T_TYPE
#endif
 __fsid_t;	/* Type of file system IDs.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__CLOCK_T_TYPE
#endif
 __clock_t;	/* Type of CPU usage counts.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__RLIM_T_TYPE
#endif
 __rlim_t;	/* Type for resource measurement.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__RLIM64_T_TYPE
#endif
 __rlim64_t;	/* Type for resource measurement (LFS).  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__ID_T_TYPE
#endif
 __id_t;		/* General type for IDs.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__TIME_T_TYPE
#endif
 __time_t;	/* Seconds since the Epoch.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__USECONDS_T_TYPE
#endif
 __useconds_t; /* Count of microseconds.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__SUSECONDS_T_TYPE
#endif
 __suseconds_t; /* Signed count of microseconds.  */

typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__DADDR_T_TYPE
#endif
 __daddr_t;	/* The type of a disk address.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__SWBLK_T_TYPE
#endif
 __swblk_t;	/* Type of a swap block maybe?  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__KEY_T_TYPE
#endif
 __key_t;	/* Type of an IPC key.  */

/* Clock ID used in clock and timer functions.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__CLOCKID_T_TYPE
#endif
 __clockid_t;

/* Timer ID returned by `timer_create'.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
void *
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__TIMER_T_TYPE
#endif
 __timer_t;

/* Type to represent block size.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__BLKSIZE_T_TYPE
#endif
 __blksize_t;

/* Types from the Large File Support interface.  */

/* Type to count number of disk blocks.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__BLKCNT_T_TYPE
#endif
 __blkcnt_t;
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__BLKCNT64_T_TYPE
#endif
 __blkcnt64_t;

/* Type to count file system blocks.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__FSBLKCNT_T_TYPE
#endif
 __fsblkcnt_t;
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__FSBLKCNT64_T_TYPE
#endif
 __fsblkcnt64_t;

/* Type to count file system nodes.  */
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__FSFILCNT_T_TYPE
#endif
 __fsfilcnt_t;
typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
unsigned long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__FSFILCNT64_T_TYPE
#endif
 __fsfilcnt64_t;

typedef 
#if (!definedEx(_SYS_RESOURCE_H) && !definedEx(_BITS_TYPES_H) && !definedEx(__digital__) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__)) && !definedEx(_BITS_TYPESIZES_H))
long int
#endif
#if (definedEx(LIBBB_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_BITS_TYPESIZES_H) || definedEx(_BITS_TYPES_H) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H))
__SSIZE_T_TYPE
#endif
 __ssize_t; /* Type of a byte count, or error.  */

/* These few don't really vary by system, they always correspond
   to one of the other defined types.  */
typedef __off64_t __loff_t;	/* Type of file sizes and offsets (LFS).  */
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;

/* Duplicates info from stdint.h but this is used in unistd.h.  */
typedef long int __intptr_t;

/* Duplicate info from sys/socket.h.  */
typedef unsigned int __socklen_t;




#endif
#line 27 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/resource.h" 2

/* Transmute defines to enumerations.  The macro re-definitions are
   necessary because some programs want to test for operating system
   features with #ifdef RUSAGE_SELF.  In ISO C the reflexive
   definition is a no-op.  */

/* Kinds of resource limit.  */
enum __rlimit_resource
{
  /* Per-process CPU limit, in seconds.  */
  RLIMIT_CPU = 0,


  /* Largest file that can be created, in bytes.  */
  RLIMIT_FSIZE = 1,


  /* Maximum size of data segment, in bytes.  */
  RLIMIT_DATA = 2,


  /* Maximum size of stack segment, in bytes.  */
  RLIMIT_STACK = 3,


  /* Largest core file that can be created, in bytes.  */
  RLIMIT_CORE = 4,


  /* Largest resident set size, in bytes.
     This affects swapping; processes that are exceeding their
     resident set size will be more likely to have physical memory
     taken from them.  */
  __RLIMIT_RSS = 5,


  /* Number of open files.  */
  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE, /* BSD name for same.  */



  /* Address space limit.  */
  RLIMIT_AS = 9,


  /* Number of processes.  */
  __RLIMIT_NPROC = 6,


  /* Locked-in-memory address space.  */
  __RLIMIT_MEMLOCK = 8,


  /* Maximum number of file locks.  */
  __RLIMIT_LOCKS = 10,


  /* Maximum number of pending signals.  */
  __RLIMIT_SIGPENDING = 11,


  /* Maximum bytes in POSIX message queues.  */
  __RLIMIT_MSGQUEUE = 12,


  /* Maximum nice priority allowed to raise to.
     Nice levels 19 .. -20 correspond to 0 .. 39
     values of this resource limit.  */
  __RLIMIT_NICE = 13,


  /* Maximum realtime priority allowed for non-priviledged
     processes.  */
  __RLIMIT_RTPRIO = 14,


  __RLIMIT_NLIMITS = 15,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};

/* Value to indicate that there is no limit.  */
#if !defined(__USE_FILE_OFFSET64)

#endif
#if defined(__USE_FILE_OFFSET64)

#endif
#if defined(__USE_LARGEFILE64)

#endif
/* We can represent all limits.  */




/* Type for resource quantity measurement.  */
#if !defined(__USE_FILE_OFFSET64)
typedef __rlim_t rlim_t;
#endif
#if defined(__USE_FILE_OFFSET64)
typedef __rlim64_t rlim_t;
#endif
#if defined(__USE_LARGEFILE64)
typedef __rlim64_t rlim64_t;
#endif
struct rlimit
  {
    /* The current (soft) limit.  */
    rlim_t rlim_cur;
    /* The hard limit.  */
    rlim_t rlim_max;
  };

#if defined(__USE_LARGEFILE64)
struct rlimit64
  {
    /* The current (soft) limit.  */
    rlim64_t rlim_cur;
    /* The hard limit.  */
    rlim64_t rlim_max;
 };
#endif
/* Whose usage statistics do you want?  */
enum __rusage_who
{
  /* The calling process.  */
  RUSAGE_SELF = 0,


  /* All of its terminated child processes.  */
  RUSAGE_CHILDREN = -1


#if defined(__USE_GNU)
  ,
  /* The calling thread.  */
  RUSAGE_THREAD = 1

  /* Name for the same functionality on Solaris.  */

#endif
};


#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/time.h" 1
/* System-dependent timing definitions.  Generic version.
   Copyright (C) 1996,1997,1999-2002,2003,2010 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; use <time.h> instead.
 */











































#if !definedEx(_STRUCT_TIMEVAL)

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/types.h" 1
/* bits/types.h -- definitions of __*_t types underlying *_t types.
   Copyright (C) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 * Never include this file directly; use <sys/types.h> instead.
 */























 






 

 

  



  

















































 









 




































































#line 73 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/time.h" 2

/* A time value that is accurate to the nearest
   microsecond but also has a range of years.  */
struct timeval
  {
    __time_t tv_sec;		/* Seconds.  */
    __suseconds_t tv_usec;	/* Microseconds.  */
  };
#endif

#line 177 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/resource.h" 2

/* Structure which says how much of each resource has been used.  */
struct rusage
  {
    /* Total amount of user time used.  */
    struct timeval ru_utime;
    /* Total amount of system time used.  */
    struct timeval ru_stime;
    /* Maximum resident set size (in kilobytes).  */
    long int ru_maxrss;
    /* Amount of sharing of text segment memory
       with other processes (kilobyte-seconds).  */
    long int ru_ixrss;
    /* Amount of data segment memory used (kilobyte-seconds).  */
    long int ru_idrss;
    /* Amount of stack memory used (kilobyte-seconds).  */
    long int ru_isrss;
    /* Number of soft page faults (i.e. those serviced by reclaiming
       a page from the list of pages awaiting reallocation.  */
    long int ru_minflt;
    /* Number of hard page faults (i.e. those that required I/O).  */
    long int ru_majflt;
    /* Number of times a process was swapped out of physical memory.  */
    long int ru_nswap;
    /* Number of input operations via the file system.  Note: This
       and `ru_oublock' do not include operations with the cache.  */
    long int ru_inblock;
    /* Number of output operations via the file system.  */
    long int ru_oublock;
    /* Number of IPC messages sent.  */
    long int ru_msgsnd;
    /* Number of IPC messages received.  */
    long int ru_msgrcv;
    /* Number of signals delivered.  */
    long int ru_nsignals;
    /* Number of voluntary context switches, i.e. because the process
       gave up the process before it had to (usually to wait for some
       resource to be available).  */
    long int ru_nvcsw;
    /* Number of involuntary context switches, i.e. a higher priority process
       became runnable or the current process used up its time slice.  */
    long int ru_nivcsw;
  };

/* Priority limits.  */



/* The type of the WHICH argument to `getpriority' and `setpriority',
   indicating what flavor of entity the WHO argument specifies.  */
enum __priority_which
{
  PRIO_PROCESS = 0,		/* WHO is a process ID.  */

  PRIO_PGRP = 1,		/* WHO is a process group ID.  */

  PRIO_USER = 2			/* WHO is a user ID.  */

};
#line 27 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/resource.h" 2

#if !definedEx(__id_t_defined)
typedef __id_t id_t;

#endif

#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))

#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__BEGIN_DECLS
#endif


/* The X/Open standard defines that all the functions below must use
   `int' as the type for the first argument.  When we are compiling with
   GNU extensions we change this slightly to provide better error
   checking.  */
#if defined(__USE_GNU)
typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
#endif
#if !defined(__USE_GNU)
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;
#endif
/* Put the soft and hard limits for RESOURCE in *RLIMITS.
   Returns 0 if successful, -1 if not (and sets errno).  */
#if !defined(__USE_FILE_OFFSET64)
extern int getrlimit (__rlimit_resource_t __resource,
		      struct rlimit *__rlimits) 
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;
#endif
#if defined(__USE_FILE_OFFSET64)
#if defined(__REDIRECT_NTH)
extern int __REDIRECT_NTH (getrlimit, (__rlimit_resource_t __resource,
				       struct rlimit *__rlimits), getrlimit64);
#endif
#if !defined(__REDIRECT_NTH)

#endif
#endif
#if defined(__USE_LARGEFILE64)
extern int getrlimit64 (__rlimit_resource_t __resource,
			struct rlimit64 *__rlimits) 
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;
#endif
/* Set the soft and hard limits for RESOURCE to *RLIMITS.
   Only the super-user can increase hard limits.
   Return 0 if successful, -1 if not (and sets errno).  */
#if !defined(__USE_FILE_OFFSET64)
extern int setrlimit (__rlimit_resource_t __resource,
		      
#if (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(__const))
const
#endif
#if (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(__const))
__const
#endif
 struct rlimit *__rlimits) 
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;
#endif
#if defined(__USE_FILE_OFFSET64)
#if defined(__REDIRECT_NTH)
extern int __REDIRECT_NTH (setrlimit, (__rlimit_resource_t __resource,
				       
#if (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(__const))
const
#endif
#if (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(__const))
__const
#endif
 struct rlimit *__rlimits),
			   setrlimit64);
#endif
#if !defined(__REDIRECT_NTH)

#endif
#endif
#if defined(__USE_LARGEFILE64)
extern int setrlimit64 (__rlimit_resource_t __resource,
			
#if (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(__const))
const
#endif
#if (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(__const))
__const
#endif
 struct rlimit64 *__rlimits) 
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;
#endif
/* Return resource usage information on process indicated by WHO
   and put it in *USAGE.  Returns 0 for success, -1 for failure.  */
extern int getrusage (__rusage_who_t __who, struct rusage *__usage) 
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;

/* Return the highest priority of any process specified by WHICH and WHO
   (see above); if WHO is zero, the current process, process group, or user
   (as specified by WHO) is used.  A lower priority number means higher
   priority.  Priorities range from PRIO_MIN to PRIO_MAX (above).  */
extern int getpriority (__priority_which_t __which, id_t __who) 
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;

/* Set the priority of all processes specified by WHICH and WHO (see above)
   to PRIO.  Returns 0 on success, -1 on errors.  */
extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     
#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))
__attribute__ ((__nothrow__))
#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__THROW
#endif
;


#if ((!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_)) && (definedEx(BB_PLATFORM_H) || definedEx(LIBBB_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_LIBC_LIMITS_H_)) && definedEx(_GCC_NEXT_LIMITS_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && !definedEx(_FEATURES_H) && !definedEx(_SYS_CDEFS_H) && definedEx(_GCC_LIMITS_H_)) || (!definedEx(_SYS_RESOURCE_H) && !definedEx(__ASSEMBLER__) && !defined(_SYS_CDEFS_H) && !definedEx(__digital__) && !defined(_FEATURES_H) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && (definedEx(__FreeBSD__) || definedEx(__OpenBSD__) || definedEx(__NetBSD__) || definedEx(__APPLE__))))

#endif
#if ((definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || (!definedEx(__ASSEMBLER__) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(LIBBB_H) && !definedEx(BB_PLATFORM_H) && !definedEx(_FEATURES_H) && !definedEx(_GCC_LIMITS_H_)) || (!definedEx(BB_PLATFORM_H) && !definedEx(LIBBB_H) && !definedEx(_GCC_LIMITS_H_)) || !definedEx(_GCC_NEXT_LIMITS_H) || definedEx(_FEATURES_H) || (!definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_LIBC_LIMITS_H_)) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || !definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(_GCC_LIMITS_H_) || definedEx(BB_PLATFORM_H)) && (defined(_FEATURES_H) || definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || defined(_SYS_CDEFS_H) || (!definedEx(__FreeBSD__) && !definedEx(__OpenBSD__) && !definedEx(__NetBSD__) && !definedEx(__APPLE__)) || definedEx(_SYS_RESOURCE_H) || definedEx(__digital__) || definedEx(BB_PLATFORM_H)))
__END_DECLS
#endif


#endif
#line 160 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/platform.h" 2
