#line 1 "/Users/Flavio/Desktop/Project/Busybox/platform-redhat.h" 1
//Generated with:
//echo -|gcc -dM - -E -std=gnu99 







































































































































#line 1 "/Users/Flavio/Desktop/Workspaces/FSE15/SamplingConstraints/bugs/busybox/archival/tar.c" 1
#if definedEx(ENABLE_FEATURE_GETOPT_LONG)
/* vi: set sw=4 ts=4: */
/*
 * Mini tar implementation for busybox
 *
 * Modified to use common extraction code used by ar, cpio, dpkg-deb, dpkg
 *  by Glenn McGrath
 *
 * Note, that as of BusyBox-0.43, tar has been completely rewritten from the
 * ground up.  It still has remnants of the old code lying about, but it is
 * very different now (i.e., cleaner, less global variables, etc.)
 *
 * Copyright (C) 1999-2004 by Erik Andersen <andersen@codepoet.org>
 *
 * Based in part in the tar implementation in sash
 *  Copyright (c) 1999 by David I. Bell
 *  Permission is granted to use, distribute, or modify this source,
 *  provided that this copyright notice remains intact.
 *  Permission to distribute sash derived code under GPL has been granted.
 *
 * Based in part on the tar implementation from busybox-0.28
 *  Copyright (C) 1995 Bruce Perens
 *
 * Licensed under GPLv2 or later, see file LICENSE in this source tree.
 */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/fnmatch.h" 1
/* Copyright (C) 1991-93,96,97,98,99,2001,2004 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#if !definedEx(_FNMATCH_H)





#if !definedEx(const)


 

#endif
/* We #undef these before defining them because some losing systems
   (HP-UX A.08.07 for example) define these in <unistd.h>.  */




/* Bits set in the FLAGS argument to `fnmatch'.  */










/* Value returned by `fnmatch' if STRING does not match PATTERN.  */


/* This value is returned if the implementation does not support
   `fnmatch'.  Since this is not the case here it will never be
   returned but the conformance test suites still require the symbol
   to be defined.  */
#if definedEx(_XOPEN_SOURCE)

#endif
/* Match NAME against the filename pattern PATTERN,
   returning zero if it matches, FNM_NOMATCH if not.  */
extern int fnmatch (
#if (!definedEx(_FNMATCH_H) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(const))
const
#endif
#if (definedEx(_FNMATCH_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(const))
__const
#endif
 char *__pattern, 
#if (!definedEx(_FNMATCH_H) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(const))
const
#endif
#if (definedEx(_FNMATCH_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(const))
__const
#endif
 char *__name,
		    int __flags);




#endif
#line 30 "/Users/Flavio/Desktop/Workspaces/FSE15/SamplingConstraints/bugs/busybox/archival/tar.c" 2
#line 1 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/libbb.h" 1
/* vi: set sw=4 ts=4: */
/*
 * Busybox main internal header file
 *
 * Based in part on code from sash, Copyright (c) 1999 by David I. Bell
 * Permission has been granted to redistribute this code under GPL.
 *
 * Licensed under GPLv2, see file LICENSE in this source tree.
 */
#if !definedEx(LIBBB_H)


#line 1 "/Users/Flavio/Desktop/Project/Busybox/busybox-1.18.5/include/platform.h" 1
/* vi: set sw=4 ts=4: */
/*
 * Copyright 2006, Bernhard Reutner-Fischer
 *
 * Licensed under GPLv2 or later, see file LICENSE in this source tree.
 */
#if !definedEx(BB_PLATFORM_H)


/* Assume all these functions exist by default.  Platforms where it is not
 * true will #undef them below.
 */










/* Convenience macros to test the version of gcc. */




 

/* __restrict is known in EGCS 1.2 and above. */





/* Define macros for some gcc attributes.  This permits us to use the
   macros freely, and know that they will come into play for the
   version of gcc in which they are supported.  */









 
 

#if (!definedEx(__const) && (definedEx(_FNMATCH_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(const)))

#endif


/* "The malloc attribute is used to tell the compiler that a function
 * may be treated as if any non-NULL pointer it returns cannot alias
 * any other pointer valid when the function returns. This will often
 * improve optimization. Standard functions with this property include
 * malloc and calloc. realloc-like functions have this property as long
 * as the old pointer is never referred to (including comparing it
 * to the new pointer) after the function returns a non-NULL value."
 */




/* __NO_INLINE__: some gcc's do not honor inlining! :( */







 


 




/* -fwhole-program makes all symbols local. The attribute externally_visible
   forces a symbol global.  */


//__attribute__ ((__externally_visible__))
 

/* At 4.4 gcc become much more anal about this, need to use "aliased" types */


 

/* We use __extension__ in some places to suppress -pedantic warnings
   about GCC extensions.  This feature didn't work properly before
   gcc 2.8.  */





/* gcc-2.95 had no va_copy but only __va_copy. */






/* FAST_FUNC is a qualifier which (possibly) makes function call faster
 * and/or smaller by using modified ABI. It is usually only needed
 * on non-static, busybox internal functions. Recent versions of gcc
 * optimize statics automatically. FAST_FUNC on static is required
 * only if you need to match a function pointer's type */
#if definedEx(i386)
/* stdcall makes callee to pop arguments from stack, not caller */

/* #elif ... - add your favorite arch today! */
#endif
#if !definedEx(i386)

#endif
/* Make all declarations hidden (-fvisibility flag only affects definitions) */
/* (don't include system headers after this until corresponding pop!) */



 


/* ---- Endian Detection ------------------------------------ */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/limits.h" 1
/* This administrivia gets added to the beginning of limits.h
   if the system has its own version of limits.h.  */

/* We use _GCC_LIMITS_H_ because we want this not to match
   any macros that the system's limits.h uses for its own purposes.  */
#if !definedEx(_GCC_LIMITS_H_)


#if !definedEx(_LIBC_LIMITS_H_)
/* Use "..." so that we find syslimits.h only in this same directory.  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include/syslimits.h" 1
/* syslimits.h stands for the system's own limits.h file.
   If we can use it ok unmodified, then we install this text.
   If fixincludes fixes it, then the fixed version is installed
   instead of this text.  */


#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/limits.h" 1
/* Copyright (C) 1991, 1992, 1996, 1997, 1998, 1999, 2000, 2005
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

/*
 *	ISO C99 Standard: 7.10/5.2.4.2.1 Sizes of integer types	<limits.h>
 */




#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 1
/* Copyright (C) 1991-1993,1995-2007,2009,2010 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */

#if !definedEx(_FEATURES_H)


/* These are defined by the user (or the compiler)
   to specify the desired environment:

   __STRICT_ANSI__	ISO Standard C.
   _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
   _POSIX_SOURCE	IEEE Std 1003.1.
   _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
			if >=199309L, add IEEE Std 1003.1b-1993;
			if >=199506L, add IEEE Std 1003.1c-1995;
			if >=200112L, all of IEEE 1003.1-2004
			if >=200809L, all of IEEE 1003.1-2008
   _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
			Single Unix conformance is wanted, to 600 for the
			sixth revision, to 700 for the seventh revision.
   _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
   _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
   _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
   _FILE_OFFSET_BITS=N	Select default filesystem interface.
   _BSD_SOURCE		ISO C, POSIX, and 4.3BSD things.
   _SVID_SOURCE		ISO C, POSIX, and SVID things.
   _ATFILE_SOURCE	Additional *at interfaces.
   _GNU_SOURCE		All of the above, plus GNU extensions.
   _REENTRANT		Select additionally reentrant object.
   _THREAD_SAFE		Same as _REENTRANT, often used by other systems.
   _FORTIFY_SOURCE	If set to numeric value > 0 additional security
			measures are defined, according to level.

   The `-ansi' switch to the GNU C compiler defines __STRICT_ANSI__.
   If none of these are defined, the default is to have _SVID_SOURCE,
   _BSD_SOURCE, and _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
   200112L.  If more than one of these are defined, they accumulate.
   For example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE
   together give you ISO C, 1003.1, and 1003.2, but nothing else.

   These are defined by this file and are used by the
   header files to decide what to declare or define:

   __USE_ISOC99		Define ISO C99 things.
   __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
   __USE_POSIX		Define IEEE Std 1003.1 things.
   __USE_POSIX2		Define IEEE Std 1003.2 things.
   __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
   __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
   __USE_XOPEN		Define XPG things.
   __USE_XOPEN_EXTENDED	Define X/Open Unix things.
   __USE_UNIX98		Define Single Unix V2 things.
   __USE_XOPEN2K        Define XPG6 things.
   __USE_XOPEN2KXSI     Define XPG6 XSI things.
   __USE_XOPEN2K8XSI    Define XPG7 XSI things.
   __USE_LARGEFILE	Define correct standard I/O things.
   __USE_LARGEFILE64	Define LFS things with separate names.
   __USE_FILE_OFFSET64	Define 64bit interface as default.
   __USE_BSD		Define 4.3BSD things.
   __USE_SVID		Define SVID things.
   __USE_MISC		Define things common to BSD and System V Unix.
   __USE_ATFILE		Define *at interfaces and AT_* constants for them.
   __USE_GNU		Define GNU extensions.
   __USE_REENTRANT	Define reentrant/thread-safe *_r functions.
   __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
   __FAVOR_BSD		Favor 4.3BSD things in cases of conflict.

   The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
   defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
   only for compatibility.  All new code should use the other symbols
   to test for features.

   All macros listed above as possibly being defined by this file are
   explicitly undefined if they are not explicitly defined.
   Feature-test macros that are not defined by the user or compiler
   but are implied by the other feature-test macros defined (or by the
   lack of any definitions) are defined by the file.  */


/* Undefine everything, so we get a clean slate.  */


























/* Suppress kernel-name space pollution unless user expressedly asks
   for it.  */
#if !definedEx(_LOOSE_KERNEL_NAMES)

#endif
/* Always use ISO C things.  */


/* Convenience macros to test the versions of glibc and gcc.
   Use them like this:
   #if __GNUC_PREREQ (2,8)
   ... code requiring gcc 2.8 or later ...
   #endif
   Note - they won't work for gcc1 or glibc1, since the _MINOR macros
   were not defined then.  */



 

/* If _BSD_SOURCE was defined by the user, favor BSD over POSIX.  */
#if (!definedEx(_POSIX_SOURCE) && !definedEx(_SVID_SOURCE) && !definedEx(_POSIX_C_SOURCE) && definedEx(_BSD_SOURCE) && !definedEx(_GNU_SOURCE) && !definedEx(_XOPEN_SOURCE))

#endif
/* If _GNU_SOURCE was defined by the user, turn on all the other features.  */
#if definedEx(_GNU_SOURCE)




















#endif
/* If nothing (other than _GNU_SOURCE) is defined,
   define _BSD_SOURCE and _SVID_SOURCE.  */
#if (!definedEx(_POSIX_SOURCE) && !definedEx(_SVID_SOURCE) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_BSD_SOURCE) && !definedEx(__STRICT_ANSI__) && !definedEx(_XOPEN_SOURCE) && !definedEx(_ISOC99_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)))


#endif
/* This is to enable the ISO C99 extension.  Also recognize the old macro
   which was used prior to the standard acceptance.  This macro will
   eventually go away and the features enabled by default once the ISO C99
   standard is widely adopted.  */



/* This is to enable the ISO C90 Amendment 1:1995 extension.  */



/* If none of the ANSI/POSIX macros are defined, use POSIX.1 and POSIX.2
   (and IEEE Std 1003.1b-1993 unless _XOPEN_SOURCE is defined).  */
#if (!definedEx(_POSIX_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H))) && !definedEx(_POSIX_C_SOURCE))

#if (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))

#endif

 
#if (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)))

#endif

#endif
#if (defined(_POSIX_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || definedEx(_XOPEN_SOURCE) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H))) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H))) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_XOPEN_SOURCE)) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))))

#endif
#if (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (defined(_POSIX_C_SOURCE) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H))) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_LIBC_LIMITS_H_) && (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H))) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_) || definedEx(_XOPEN_SOURCE)) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))))))

#endif
#if ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))))

#endif
#if ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))))

#endif
#if ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))))





#endif
#if ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && ((definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || (definedEx(__STRICT_ANSI__) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))) || definedEx(LIBBB_H) || definedEx(_POSIX_C_SOURCE) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_POSIX_SOURCE) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)) || (!definedEx(_POSIX_SOURCE) && definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_POSIX_C_SOURCE) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_XOPEN_SOURCE) && (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_)) && !definedEx(_FEATURES_H) && (!definedEx(__STRICT_ANSI__) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))))



#endif
#if (definedEx(_XOPEN_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))

#if (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H))
















#endif
#if (definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(_GNU_SOURCE) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))
#if (definedEx(_XOPEN_SOURCE_EXTENDED) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))

#endif
#endif
#endif
#if defined(_LARGEFILE_SOURCE)

#endif
#if (definedEx(_LARGEFILE64_SOURCE) || (definedEx(ENABLE_FEATURE_GETOPT_LONG) && !definedEx(LIBBB_H) && !definedEx(_LIBC_LIMITS_H_) && !definedEx(BB_PLATFORM_H) && definedEx(_GNU_SOURCE) && !definedEx(_GCC_LIMITS_H_) && !definedEx(_FEATURES_H)))

#endif



#if (defined(_BSD_SOURCE) || defined(_SVID_SOURCE))

#endif
#if defined(_BSD_SOURCE)

#endif
#if defined(_SVID_SOURCE)

#endif
#if defined(_ATFILE_SOURCE)

#endif
#if definedEx(_GNU_SOURCE)

#endif
#if (definedEx(_REENTRANT) || definedEx(_THREAD_SAFE))

#endif






 
 

 

/* We do support the IEC 559 math functionality, real and complex.  */



/* wchar_t uses ISO 10646-1 (2nd ed., published 2000-09-15) / Unicode 3.1.  */


/* This macro indicates that the installed library is the GNU C Library.
   For historic reasons the value now is 6 and this will stay from now
   on.  The use of this variable is deprecated.  Use __GLIBC__ and
   __GLIBC_MINOR__ now (see below) when you want to test for a specific
   GNU C library version and use the values in <gnu/lib-names.h> to get
   the sonames of the shared libraries.  */



/* Major and minor version number of the GNU C library package.  Use
   these macros to test for features in specific releases.  */






/* Decide whether a compiler supports the long long datatypes.  */



/* This is here only because every header file already includes this one.  */
#if !definedEx(__ASSEMBLER__)
#if !definedEx(_SYS_CDEFS_H)
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 1
/* Copyright (C) 1992-2001, 2002, 2004, 2005, 2006, 2007, 2009
   Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, write to the Free
   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307 USA.  */




/* We are almost always included from features.h. */



/* The GNU libc does not support any K&R compilers or the traditional mode
   of ISO C compilers anymore.  Check for some of the combinations not
   anymore supported.  */



/* Some user header file might have defined this before.  */




/* GCC can always grok prototypes.  For C++ programs we add throw()
   to help it optimize the function calls.  But this works only with
   gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
   as non-throwing using a function attribute since programs can use
   the -fexceptions options for C code as well.  */



 


 



 









/* These two macros are not used in glibc anymore.  They are kept here
   only because some other projects expect the macros to be defined.  */



/* For these things, GCC behaves the ANSI way normally,
   and the non-ANSI way under -traditional.  */




/* This is not a typedef so `const __ptr_t' does the right thing.  */




/* C++ needs to know that types and declarations are C, not C++.  */



 


/* The standard library needs the functions from the ISO C90 standard
   in the std namespace.  At the same time we want to be safe for
   future changes and we include the ISO C99 code in the non-standard
   namespace __c99.  The C++ wrapper header take case of adding the
   definitions to the global namespace.  */







 /* For compatibility we do not add the declarations into any
   namespace.  They will end up in the global namespace which is what
   old code expects.  */







/* Support for bounded pointers.  */
#if !definedEx(__BOUNDED_POINTERS__)



#endif
/* Fortify support.  */









 



/* Support for flexible arrays.  */

/* GCC 2.97 supports C99 flexible array members.  */

 

 

 




/* __asm__ ("xyz") is used throughout the headers to rename functions
   at the assembly language level.  This is wrapped by the __REDIRECT
   macro, in order to support compilers that can do this some other
   way.  When compilers don't support asm-names at all, we have to do
   preprocessor tricks instead (which don't have exactly the right
   semantics, but it's the best we can do).

   Example:
   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */






 





/*
#elif __SOME_OTHER_COMPILER__

# define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

*/

/* GCC has various useful declarations that can be made with the
   `__attribute__' syntax.  All of the ways we use this do fine if
   they are omitted for compilers that don't understand it. */



/* At some point during the gcc 2.96 development the `malloc' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 2.96 development the `pure' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */


 

/* At some point during the gcc 3.1 development the `used' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.  */



 


/* gcc allows marking deprecated functions.  */


 

/* At some point during the gcc 2.8 development the `format_arg' attribute
   for functions was introduced.  We don't want to use it unconditionally
   (although this would be possible) since it generates warnings.
   If several `format_arg' attributes are given for the same function, in
   gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
   all designated arguments are considered.  */


 

/* At some point during the gcc 2.97 development the `strfmon' format
   attribute for functions was introduced.  We don't want to use it
   unconditionally (although this would be possible) since it
   generates warnings.  */



 

/* The nonull function attribute allows to mark pointer parameters which
   must not be NULL.  */


 

/* If fortification mode, we warn about unused results of certain
   function calls which can lead to problems.  */






 

#if !definedEx(__wur)

#endif
/* Forces a function to be always inlined.  */


 

/* GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
   inline semantics, unless -fgnu89-inline is used.  */






 


 



 



/* GCC 4.3 and above allow passing all anonymous arguments of an
   __extern_always_inline function to some other vararg function.  */




/* It is possible to compile containing GCC extensions even if GCC is
   run in pedantic mode if the uses are carefully marked using the
   `__extension__' keyword.  But this is not generally available before
   version 2.8.  */



/* __restrict is known in EGCS 1.2 and above. */



/* ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
     array_name[restrict]
   GCC 3.1 supports this.  */
#if !definedEx(__GNUG__)

#endif
#if definedEx(__GNUG__)


 

 



#endif
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 367 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/sys/cdefs.h" 2

#if (definedEx(__LONG_DOUBLE_MATH_OPTIONAL) && definedEx(__NO_LONG_DOUBLE_MATH))

















#endif
#if (!defined(__LDBL_COMPAT) || (!definedEx(__REDIRECT) && (definedEx(__ASSEMBLER__) || definedEx(LIBBB_H) || definedEx(_FEATURES_H) || !definedEx(ENABLE_FEATURE_GETOPT_LONG) || definedEx(_LIBC_LIMITS_H_) || definedEx(_SYS_CDEFS_H) || definedEx(BB_PLATFORM_H) || definedEx(_GCC_LIMITS_H_))))










#endif

#line 363 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/features.h" 2
#endif
/* If we don't have __REDIRECT, prototypes will be missing if
   __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64]. */




#endif
/* Decide whether we can define 'extern inline' functions in headers.  */



/* This is here only because every header file already includes this one.
   Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
   <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
   that will always return failure (and set errno to ENOSYS).  */
#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 1
/* This file selects the right generated file of `__stub_FUNCTION' macros
   based on the architecture being compiled for.  */

#line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/bits/wordsize.h" 1
/* Determine the wordsize from the preprocessor defines.  */




 

#line 6 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs.h" 2



 #line 1 "/Users/Flavio/Desktop/Project/Busybox/systems/redhat/usr/include/gnu/stubs-64.h" 1
/* This file is automatically generated.
   It defines a symbol `__stub_FUNCTION' for each function
   in the C library which is a stub, meaning it will fail
   every time called, usually setting errno to ENOSYS.  */

#if definedEx(_LIBC)
 